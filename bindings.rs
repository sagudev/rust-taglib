/* automatically generated by rust-bindgen 0.60.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage> {
        storage: Storage,
    }
    impl<Storage> __BindgenBitfieldUnit<Storage> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage }
        }
    }
    impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::std::mem::transmute(self)
        }
    }
    impl<T> ::std::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub const TAGLIB_WITH_ASF: u32 = 1;
    pub const TAGLIB_WITH_MP4: u32 = 1;
    pub const TAGLIB_MAJOR_VERSION: u32 = 1;
    pub const TAGLIB_MINOR_VERSION: u32 = 11;
    pub const TAGLIB_PATCH_VERSION: u32 = 1;
    pub const _GLIBCXX_STRING: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 11;
    pub const __GLIBCXX__: u32 = 20220324;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _ISOC2X_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2X: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 35;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
    pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINK: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const LT_OBJDIR: &[u8; 7usize] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15usize] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30usize] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10usize] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &[u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15usize] = b"version-unused\0";
    pub const STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_HOSTED: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INT128: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_LSTAT: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UTIME: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GLIBCXX_X86_RDSEED: u32 = 1;
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _STRINGFWD_H: u32 = 1;
    pub const _MEMORYFWD_H: u32 = 1;
    pub const _CHAR_TRAITS_H: u32 = 1;
    pub const _STL_ALGOBASE_H: u32 = 1;
    pub const _FUNCTEXCEPT_H: u32 = 1;
    pub const _EXCEPTION_DEFINES_H: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _EXT_NUMERIC_TRAITS: u32 = 1;
    pub const _STL_PAIR_H: u32 = 1;
    pub const _MOVE_H: u32 = 1;
    pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const __cpp_lib_void_t: u32 = 201411;
    pub const __cpp_lib_is_swappable: u32 = 201603;
    pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
    pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
    pub const _CONCEPT_CHECK_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
    pub const _STL_ITERATOR_H: u32 = 1;
    pub const _PTR_TRAITS_H: u32 = 1;
    pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
    pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
    pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
    pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const _GLIBCXX_POSTYPES_H: u32 = 1;
    pub const _WCHAR_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __GNUC_VA_LIST: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const __wint_t_defined: u32 = 1;
    pub const _WINT_T: u32 = 1;
    pub const __mbstate_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const WEOF: u32 = 4294967295;
    pub const _GLIBCXX_CWCHAR: u32 = 1;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
    pub const _NEW_ALLOCATOR_H: u32 = 1;
    pub const __EXCEPTION_H: u32 = 1;
    pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
    pub const _LOCALE_FWD_H: u32 = 1;
    pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
    pub const _LOCALE_H: u32 = 1;
    pub const _BITS_LOCALE_H: u32 = 1;
    pub const __LC_CTYPE: u32 = 0;
    pub const __LC_NUMERIC: u32 = 1;
    pub const __LC_TIME: u32 = 2;
    pub const __LC_COLLATE: u32 = 3;
    pub const __LC_MONETARY: u32 = 4;
    pub const __LC_MESSAGES: u32 = 5;
    pub const __LC_ALL: u32 = 6;
    pub const __LC_PAPER: u32 = 7;
    pub const __LC_NAME: u32 = 8;
    pub const __LC_ADDRESS: u32 = 9;
    pub const __LC_TELEPHONE: u32 = 10;
    pub const __LC_MEASUREMENT: u32 = 11;
    pub const __LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE: u32 = 0;
    pub const LC_NUMERIC: u32 = 1;
    pub const LC_TIME: u32 = 2;
    pub const LC_COLLATE: u32 = 3;
    pub const LC_MONETARY: u32 = 4;
    pub const LC_MESSAGES: u32 = 5;
    pub const LC_ALL: u32 = 6;
    pub const LC_PAPER: u32 = 7;
    pub const LC_NAME: u32 = 8;
    pub const LC_ADDRESS: u32 = 9;
    pub const LC_TELEPHONE: u32 = 10;
    pub const LC_MEASUREMENT: u32 = 11;
    pub const LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE_MASK: u32 = 1;
    pub const LC_NUMERIC_MASK: u32 = 2;
    pub const LC_TIME_MASK: u32 = 4;
    pub const LC_COLLATE_MASK: u32 = 8;
    pub const LC_MONETARY_MASK: u32 = 16;
    pub const LC_MESSAGES_MASK: u32 = 32;
    pub const LC_PAPER_MASK: u32 = 128;
    pub const LC_NAME_MASK: u32 = 256;
    pub const LC_ADDRESS_MASK: u32 = 512;
    pub const LC_TELEPHONE_MASK: u32 = 1024;
    pub const LC_MEASUREMENT_MASK: u32 = 2048;
    pub const LC_IDENTIFICATION_MASK: u32 = 4096;
    pub const LC_ALL_MASK: u32 = 8127;
    pub const _GLIBCXX_CLOCALE: u32 = 1;
    pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
    pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
    pub const _GLIBCXX_IOSFWD: u32 = 1;
    pub const _CTYPE_H: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const _GLIBCXX_CCTYPE: u32 = 1;
    pub const _OSTREAM_INSERT_H: u32 = 1;
    pub const _CXXABI_FORCED_H: u32 = 1;
    pub const _STL_FUNCTION_H: u32 = 1;
    pub const __cpp_lib_transparent_operators: u32 = 201510;
    pub const _BACKWARD_BINDERS_H: u32 = 1;
    pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
    pub const _BASIC_STRING_H: u32 = 1;
    pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
    pub const __GTHREADS: u32 = 1;
    pub const __GTHREADS_CXX0X: u32 = 1;
    pub const _PTHREAD_H: u32 = 1;
    pub const _SCHED_H: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const _BITS_SCHED_H: u32 = 1;
    pub const SCHED_OTHER: u32 = 0;
    pub const SCHED_FIFO: u32 = 1;
    pub const SCHED_RR: u32 = 2;
    pub const SCHED_BATCH: u32 = 3;
    pub const SCHED_ISO: u32 = 4;
    pub const SCHED_IDLE: u32 = 5;
    pub const SCHED_DEADLINE: u32 = 6;
    pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
    pub const CSIGNAL: u32 = 255;
    pub const CLONE_VM: u32 = 256;
    pub const CLONE_FS: u32 = 512;
    pub const CLONE_FILES: u32 = 1024;
    pub const CLONE_SIGHAND: u32 = 2048;
    pub const CLONE_PIDFD: u32 = 4096;
    pub const CLONE_PTRACE: u32 = 8192;
    pub const CLONE_VFORK: u32 = 16384;
    pub const CLONE_PARENT: u32 = 32768;
    pub const CLONE_THREAD: u32 = 65536;
    pub const CLONE_NEWNS: u32 = 131072;
    pub const CLONE_SYSVSEM: u32 = 262144;
    pub const CLONE_SETTLS: u32 = 524288;
    pub const CLONE_PARENT_SETTID: u32 = 1048576;
    pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
    pub const CLONE_DETACHED: u32 = 4194304;
    pub const CLONE_UNTRACED: u32 = 8388608;
    pub const CLONE_CHILD_SETTID: u32 = 16777216;
    pub const CLONE_NEWCGROUP: u32 = 33554432;
    pub const CLONE_NEWUTS: u32 = 67108864;
    pub const CLONE_NEWIPC: u32 = 134217728;
    pub const CLONE_NEWUSER: u32 = 268435456;
    pub const CLONE_NEWPID: u32 = 536870912;
    pub const CLONE_NEWNET: u32 = 1073741824;
    pub const CLONE_IO: u32 = 2147483648;
    pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
    pub const _BITS_CPU_SET_H: u32 = 1;
    pub const __CPU_SETSIZE: u32 = 1024;
    pub const CPU_SETSIZE: u32 = 1024;
    pub const _TIME_H: u32 = 1;
    pub const _BITS_TIME_H: u32 = 1;
    pub const CLOCK_REALTIME: u32 = 0;
    pub const CLOCK_MONOTONIC: u32 = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const CLOCK_REALTIME_COARSE: u32 = 5;
    pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const CLOCK_BOOTTIME: u32 = 7;
    pub const CLOCK_REALTIME_ALARM: u32 = 8;
    pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const CLOCK_TAI: u32 = 11;
    pub const TIMER_ABSTIME: u32 = 1;
    pub const _BITS_TIMEX_H: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const ADJ_OFFSET: u32 = 1;
    pub const ADJ_FREQUENCY: u32 = 2;
    pub const ADJ_MAXERROR: u32 = 4;
    pub const ADJ_ESTERROR: u32 = 8;
    pub const ADJ_STATUS: u32 = 16;
    pub const ADJ_TIMECONST: u32 = 32;
    pub const ADJ_TAI: u32 = 128;
    pub const ADJ_SETOFFSET: u32 = 256;
    pub const ADJ_MICRO: u32 = 4096;
    pub const ADJ_NANO: u32 = 8192;
    pub const ADJ_TICK: u32 = 16384;
    pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const MOD_OFFSET: u32 = 1;
    pub const MOD_FREQUENCY: u32 = 2;
    pub const MOD_MAXERROR: u32 = 4;
    pub const MOD_ESTERROR: u32 = 8;
    pub const MOD_STATUS: u32 = 16;
    pub const MOD_TIMECONST: u32 = 32;
    pub const MOD_CLKB: u32 = 16384;
    pub const MOD_CLKA: u32 = 32769;
    pub const MOD_TAI: u32 = 128;
    pub const MOD_MICRO: u32 = 4096;
    pub const MOD_NANO: u32 = 8192;
    pub const STA_PLL: u32 = 1;
    pub const STA_PPSFREQ: u32 = 2;
    pub const STA_PPSTIME: u32 = 4;
    pub const STA_FLL: u32 = 8;
    pub const STA_INS: u32 = 16;
    pub const STA_DEL: u32 = 32;
    pub const STA_UNSYNC: u32 = 64;
    pub const STA_FREQHOLD: u32 = 128;
    pub const STA_PPSSIGNAL: u32 = 256;
    pub const STA_PPSJITTER: u32 = 512;
    pub const STA_PPSWANDER: u32 = 1024;
    pub const STA_PPSERROR: u32 = 2048;
    pub const STA_CLOCKERR: u32 = 4096;
    pub const STA_NANO: u32 = 8192;
    pub const STA_MODE: u32 = 16384;
    pub const STA_CLK: u32 = 32768;
    pub const STA_RONLY: u32 = 65280;
    pub const __clock_t_defined: u32 = 1;
    pub const __struct_tm_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const __itimerspec_defined: u32 = 1;
    pub const TIME_UTC: u32 = 1;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const __jmp_buf_tag_defined: u32 = 1;
    pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
    pub const PTHREAD_ONCE_INIT: u32 = 0;
    pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
    pub const PTHREAD_ATTR_NO_SIGMASK_NP: i32 = -1;
    pub const __GTHREAD_HAS_COND: u32 = 1;
    pub const __GTHREAD_ONCE_INIT: u32 = 0;
    pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
    pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
    pub const _ALLOC_TRAITS_H: u32 = 1;
    pub const _STL_CONSTRUCT_H: u32 = 1;
    pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
    pub const _STRING_CONVERSIONS_H: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __sigset_t_defined: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _ALLOCA_H: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const __cookie_io_functions_t_defined: u32 = 1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
    pub const RENAME_NOREPLACE: u32 = 1;
    pub const RENAME_EXCHANGE: u32 = 2;
    pub const RENAME_WHITEOUT: u32 = 4;
    pub const _GLIBCXX_CSTDIO: u32 = 1;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const _GLIBCXX_CHARCONV_H: u32 = 1;
    pub const _FUNCTIONAL_HASH_H: u32 = 1;
    pub const _HASH_BYTES_H: u32 = 1;
    pub const __cpp_lib_string_udls: u32 = 201304;
    pub const _BASIC_STRING_TCC: u32 = 1;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type size_t = ::std::os::raw::c_ulong;
        pub type nullptr_t = *const ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_stringbuf {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_istringstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ostringstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_stringstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct numpunct {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct numpunct_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct collate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct collate_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_get_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages_byname {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct basic_string<_CharT> {
            pub _M_dataplus: root::std::basic_string__Alloc_hider,
            pub _M_string_length: root::std::basic_string_size_type,
            pub __bindgen_anon_1: root::std::basic_string__bindgen_ty_2<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_string__Char_alloc_type = [u8; 0usize];
        pub type basic_string__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type basic_string_traits_type<_Traits> = _Traits;
        pub type basic_string_value_type = [u8; 0usize];
        pub type basic_string_allocator_type = root::std::basic_string__Char_alloc_type;
        pub type basic_string_size_type = [u8; 0usize];
        pub type basic_string_difference_type = [u8; 0usize];
        pub type basic_string_reference = [u8; 0usize];
        pub type basic_string_const_reference = [u8; 0usize];
        pub type basic_string_pointer = [u8; 0usize];
        pub type basic_string_const_pointer = [u8; 0usize];
        pub type basic_string_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::basic_string_pointer>;
        pub type basic_string_const_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::basic_string_const_pointer>;
        pub type basic_string_const_reverse_iterator =
            root::std::reverse_iterator<root::std::basic_string_const_iterator>;
        pub type basic_string_reverse_iterator =
            root::std::reverse_iterator<root::std::basic_string_iterator>;
        pub type basic_string___const_iterator = root::std::basic_string_const_iterator;
        #[repr(C)]
        pub struct basic_string__Alloc_hider {
            pub _M_p: root::std::basic_string_pointer,
        }
        pub const basic_string__S_local_capacity: root::std::basic_string__bindgen_ty_1 = 0;
        pub type basic_string__bindgen_ty_1 = i32;
        #[repr(C)]
        pub struct basic_string__bindgen_ty_2<_CharT> {
            pub _M_local_buf: root::__BindgenUnionField<*mut _CharT>,
            pub _M_allocated_capacity: root::__BindgenUnionField<root::std::basic_string_size_type>,
            pub bindgen_union_field: u64,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uses_allocator {
            pub _address: u8,
        }
        pub type string = root::std::basic_string<::std::os::raw::c_char>;
        pub type wstring = root::std::basic_string<u32>;
        pub type u16string = root::std::basic_string<u16>;
        pub type u32string = root::std::basic_string<u32>;
        extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
            pub fn __throw_bad_exception();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
            pub fn __throw_bad_alloc();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt28__throw_bad_array_new_lengthv"]
            pub fn __throw_bad_array_new_length();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
            pub fn __throw_bad_cast();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
            pub fn __throw_bad_typeid();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
            pub fn __throw_logic_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
            pub fn __throw_domain_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
            pub fn __throw_invalid_argument(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
            pub fn __throw_length_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
            pub fn __throw_out_of_range(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
            pub fn __throw_out_of_range_fmt(arg1: *const ::std::os::raw::c_char, ...);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
            pub fn __throw_runtime_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
            pub fn __throw_range_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
            pub fn __throw_overflow_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
            pub fn __throw_underflow_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
            pub fn __throw_ios_failure(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKci"]
            pub fn __throw_ios_failure1(
                arg1: *const ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_system_errori"]
            pub fn __throw_system_error(arg1: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_future_errori"]
            pub fn __throw_future_error(arg1: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
            pub fn __throw_bad_function_call();
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___true_type() {
            assert_eq!(
                ::std::mem::size_of::<__true_type>(),
                1usize,
                concat!("Size of: ", stringify!(__true_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__true_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__true_type))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __false_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___false_type() {
            assert_eq!(
                ::std::mem::size_of::<__false_type>(),
                1usize,
                concat!("Size of: ", stringify!(__false_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__false_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__false_type))
            );
        }
        pub type __truth_type___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 = 0;
        pub type __traitor__bindgen_ty_1 = i32;
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 = 0;
        pub type __are_same__bindgen_ty_1 = i32;
        pub type __are_same___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_void {
            pub _address: u8,
        }
        pub const __is_void___value: root::std::__is_void__bindgen_ty_1 = 0;
        pub type __is_void__bindgen_ty_1 = i32;
        pub type __is_void___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_void_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_void>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_void)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_void>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_void)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 = 0;
        pub type __is_integer__bindgen_ty_1 = i32;
        pub type __is_integer___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_integer_open0_bool__close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0___int128_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned___int128_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value: root::std::__is_floating__bindgen_ty_1 = 0;
        pub type __is_floating__bindgen_ty_1 = i32;
        pub type __is_floating___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_floating_open0_float_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_open0_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_open0_long_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_pointer {
            pub _address: u8,
        }
        pub const __is_pointer___value: root::std::__is_pointer__bindgen_ty_1 = 0;
        pub type __is_pointer__bindgen_ty_1 = i32;
        pub type __is_pointer___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 = 0;
        pub type __is_char__bindgen_ty_1 = i32;
        pub type __is_char___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_char_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_char_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 = 0;
        pub type __is_byte__bindgen_ty_1 = i32;
        pub type __is_byte___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_byte_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_byte_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_byte_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nonvolatile_trivially_copyable {
            pub _address: u8,
        }
        pub const __is_nonvolatile_trivially_copyable___value:
            root::std::__is_nonvolatile_trivially_copyable__bindgen_ty_1 = 0;
        pub type __is_nonvolatile_trivially_copyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcpyable {
            pub _address: u8,
        }
        pub const __memcpyable___value: root::std::__memcpyable__bindgen_ty_1 = 0;
        pub type __memcpyable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __memcmpable {
            pub _address: u8,
        }
        pub const __memcmpable___value: root::std::__memcmpable__bindgen_ty_1 = 0;
        pub type __memcmpable__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value: root::std::__is_move_iterator__bindgen_ty_1 = 0;
        pub type __is_move_iterator__bindgen_ty_1 = i32;
        pub type __is_move_iterator___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reference_wrapper {
            pub _address: u8,
        }
        pub type integral_constant_value_type<_Tp> = _Tp;
        pub type integral_constant_type = u8;
        extern "C" {
            pub static value: _Tp;
        }
        pub type true_type = u8;
        pub type false_type = u8;
        pub type __bool_constant = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __type_identity {
            pub _address: u8,
        }
        pub type __type_identity_type<_Type> = _Type;
        pub type __type_identity_t = root::std::__type_identity;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___or__open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__or_>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__or_)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__or_>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__or_)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___and__open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__and_>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__and_)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__and_>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__and_)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __failure_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___failure_type() {
            assert_eq!(
                ::std::mem::size_of::<__failure_type>(),
                1usize,
                concat!("Size of: ", stringify!(__failure_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__failure_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__failure_type))
            );
        }
        pub type __remove_cv_t = root::std::remove_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_void_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_void_helper_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_void_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_void_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_void_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_void_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_void {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integral_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_bool__close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0___int128_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned___int128_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating_point_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_float_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_long_double_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0___float128_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_array {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_lvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_rvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_object_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_function_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_null_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_null_pointer_helper_open0_nullptr_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_null_pointer_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_null_pointer_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_null_pointer_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_null_pointer_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_null_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nullptr_t {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        pub type __is_one_of = root::std::__or_;
        pub type __is_signed_integer = root::std::__is_one_of;
        pub type __is_unsigned_integer = root::std::__is_one_of;
        pub type __is_standard_integer = root::std::__or_;
        pub type __void_t = ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_referenceable {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_const {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_volatile {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copyable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_final {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_known_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_unknown_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_destructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_destructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_destructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_destructible_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_destructible_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_is_destructible_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_nt_destructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_nt_destructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_nt_destructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_nt_destructible_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_nt_destructible_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_is_nt_destructible_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        pub type __is_nothrow_constructible_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        pub type __is_nothrow_assignable_impl = root::std::__bool_constant;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_implicitly_default_constructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_implicitly_default_constructible_impl>(),
                1usize,
                concat!(
                    "Size of: ",
                    stringify!(__do_is_implicitly_default_constructible_impl)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_implicitly_default_constructible_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__do_is_implicitly_default_constructible_impl)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
            pub fn __do_is_implicitly_default_constructible_impl___test() -> root::std::false_type;
        }
        impl __do_is_implicitly_default_constructible_impl {
            #[inline]
            pub unsafe fn __test() -> root::std::false_type {
                __do_is_implicitly_default_constructible_impl___test()
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct rank {
            pub _base: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_same {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_base_of {
            pub _address: u8,
        }
        pub type __is_convertible_helper_type = root::std::is_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_convertible {
            pub _address: u8,
        }
        pub type __is_array_convertible = root::std::is_convertible;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_convertible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type = root::std::add_const;
        pub type remove_const_t = root::std::remove_const;
        pub type remove_volatile_t = root::std::remove_volatile;
        pub type remove_cv_t = root::std::remove_cv;
        pub type add_const_t = root::std::add_const;
        pub type add_volatile_t = root::std::add_volatile;
        pub type add_cv_t = root::std::add_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        pub type __add_lvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        pub type __add_rvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        pub type remove_reference_t = root::std::remove_reference;
        pub type add_lvalue_reference_t = root::std::add_lvalue_reference;
        pub type add_rvalue_reference_t = root::std::add_rvalue_reference;
        pub type __match_cv_qualifiers___match = u8;
        pub type __match_cv_qualifiers___type = root::std::__match_cv_qualifiers___match;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type<_Tp> = _Tp;
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0___int128_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned_selector_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned_selector_base__List {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___make_unsigned_selector_base() {
            assert_eq!(
                ::std::mem::size_of::<__make_unsigned_selector_base>(),
                1usize,
                concat!("Size of: ", stringify!(__make_unsigned_selector_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__make_unsigned_selector_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__make_unsigned_selector_base))
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type<_Tp> = _Tp;
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned___int128_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        pub type make_signed_t = root::std::make_signed;
        pub type make_unsigned_t = root::std::make_unsigned;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type<_Tp> = _Tp;
        pub type remove_extent_t = root::std::remove_extent;
        pub type remove_all_extents_t = root::std::remove_all_extents;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_pointer_helper {
            pub _address: u8,
        }
        pub type __remove_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        pub type __add_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_pointer {
            pub _address: u8,
        }
        pub type remove_pointer_t = root::std::remove_pointer;
        pub type add_pointer_t = root::std::add_pointer;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __aligned_storage_msa___type {
            pub __data: *mut ::std::os::raw::c_uchar,
            pub __align: root::std::__aligned_storage_msa___type__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_storage_msa___type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___aligned_storage_msa___type() {
            assert_eq!(
                ::std::mem::size_of::<__aligned_storage_msa___type>(),
                8usize,
                concat!("Size of: ", stringify!(__aligned_storage_msa___type))
            );
            assert_eq!(
                ::std::mem::align_of::<__aligned_storage_msa___type>(),
                8usize,
                concat!("Alignment of ", stringify!(__aligned_storage_msa___type))
            );
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union aligned_storage_type {
            pub __data: *mut ::std::os::raw::c_uchar,
            pub __align: root::std::aligned_storage_type__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct aligned_storage_type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_aligned_storage_type() {
            assert_eq!(
                ::std::mem::size_of::<aligned_storage_type>(),
                8usize,
                concat!("Size of: ", stringify!(aligned_storage_type))
            );
            assert_eq!(
                ::std::mem::align_of::<aligned_storage_type>(),
                8usize,
                concat!("Alignment of ", stringify!(aligned_storage_type))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strictest_alignment {
            pub _address: u8,
        }
        pub type aligned_union___strictest = root::std::__strictest_alignment;
        pub type aligned_union_type = u8;
        extern "C" {
            pub static alignment_value: root::std::size_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay___remove_type = root::std::remove_reference;
        pub type decay_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type<_Tp> = _Tp;
        pub type __decay_t = root::std::decay;
        pub type __decay_and_strip = root::std::__strip_reference_wrapper;
        pub type __enable_if_t = u8;
        pub type _Require = root::std::__enable_if_t;
        pub type __remove_cvref_t = root::std::remove_cv;
        pub type conditional_type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_common_type_impl {
            pub _address: u8,
        }
        pub type __do_common_type_impl___cond_t<_Tp> = _Tp;
        #[test]
        fn bindgen_test_layout___do_common_type_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_common_type_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_common_type_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_common_type_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_common_type_impl))
            );
        }
        #[test]
        fn __bindgen_test_layout_common_type_open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::common_type>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::common_type)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::common_type>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::common_type)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type = root::std::common_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_pack {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_fold {
            pub _address: u8,
        }
        pub type __underlying_type_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct underlying_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_ref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memfun_ref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memfun_ref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memfun_ref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memfun_ref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memfun_ref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_deref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memfun_deref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memfun_deref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memfun_deref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memfun_deref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memfun_deref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_ref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memobj_ref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memobj_ref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memobj_ref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memobj_ref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memobj_ref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_deref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memobj_deref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memobj_deref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memobj_deref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memobj_deref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memobj_deref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_other {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_other() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_other>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_other))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_other>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_other))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_success {
            pub _address: u8,
        }
        pub type __result_of_success___invoke_type<_Tag> = _Tag;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memfun_ref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memfun_ref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memfun_ref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memfun_ref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memfun_ref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memfun_deref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memfun_deref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memfun_deref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memfun_deref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memfun_deref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memobj_ref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memobj_ref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memobj_ref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memobj_ref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memobj_ref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memobj_deref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memobj_deref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memobj_deref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memobj_deref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memobj_deref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __inv_unwrap {
            pub _address: u8,
        }
        pub type __inv_unwrap_type<_Tp> = _Tp;
        pub type __result_of_impl_type = root::std::__failure_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_other_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_other_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_other_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_other_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_other_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_other_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_result {
            pub _address: u8,
        }
        pub type aligned_storage_t = u8;
        pub type aligned_union_t = u8;
        pub type decay_t = root::std::decay;
        pub type enable_if_t = u8;
        pub type conditional_t = u8;
        pub type common_type_t = root::std::common_type;
        pub type underlying_type_t = root::std::underlying_type;
        pub type result_of_t = root::std::result_of;
        pub type void_t = ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_value_t = root::std::false_type;
        pub type __detector_type<_Default> = _Default;
        pub type __detected_or = root::std::__detector;
        pub type __detected_or_t = root::std::__detected_or;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        pub mod __swappable_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_swappable_impl() {
                assert_eq!(
                    ::std::mem::size_of::<__do_is_swappable_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_swappable_impl))
                );
                assert_eq!(
                    ::std::mem::align_of::<__do_is_swappable_impl>(),
                    1usize,
                    concat!("Alignment of ", stringify!(__do_is_swappable_impl))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_nothrow_swappable_impl() {
                assert_eq!(
                    ::std::mem::size_of::<__do_is_nothrow_swappable_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_nothrow_swappable_impl))
                );
                assert_eq!(
                    ::std::mem::align_of::<__do_is_nothrow_swappable_impl>(),
                    1usize,
                    concat!("Alignment of ", stringify!(__do_is_nothrow_swappable_impl))
                );
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_impl {
            pub _address: u8,
        }
        pub type __is_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_swappable {
            pub _address: u8,
        }
        pub mod __swappable_with_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_with_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_swappable_with_impl() {
                assert_eq!(
                    ::std::mem::size_of::<__do_is_swappable_with_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_swappable_with_impl))
                );
                assert_eq!(
                    ::std::mem::align_of::<__do_is_swappable_with_impl>(),
                    1usize,
                    concat!("Alignment of ", stringify!(__do_is_swappable_with_impl))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_with_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_nothrow_swappable_with_impl() {
                assert_eq!(
                    ::std::mem::size_of::<__do_is_nothrow_swappable_with_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_nothrow_swappable_with_impl))
                );
                assert_eq!(
                    ::std::mem::align_of::<__do_is_nothrow_swappable_with_impl>(),
                    1usize,
                    concat!(
                        "Alignment of ",
                        stringify!(__do_is_nothrow_swappable_with_impl)
                    )
                );
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_swappable_with {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_swappable_with {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __call_is_nothrow {
            pub _address: u8,
        }
        pub type __call_is_nothrow_ = root::std::__call_is_nothrow;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __nonesuchbase {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___nonesuchbase() {
            assert_eq!(
                ::std::mem::size_of::<__nonesuchbase>(),
                1usize,
                concat!("Size of: ", stringify!(__nonesuchbase))
            );
            assert_eq!(
                ::std::mem::align_of::<__nonesuchbase>(),
                1usize,
                concat!("Alignment of ", stringify!(__nonesuchbase))
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __nonesuch {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___nonesuch() {
            assert_eq!(
                ::std::mem::size_of::<__nonesuch>(),
                1usize,
                concat!("Size of: ", stringify!(__nonesuch))
            );
            assert_eq!(
                ::std::mem::align_of::<__nonesuch>(),
                1usize,
                concat!("Alignment of ", stringify!(__nonesuch))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_construct_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_piecewise_construct_t() {
            assert_eq!(
                ::std::mem::size_of::<piecewise_construct_t>(),
                1usize,
                concat!("Size of: ", stringify!(piecewise_construct_t))
            );
            assert_eq!(
                ::std::mem::align_of::<piecewise_construct_t>(),
                1usize,
                concat!("Alignment of ", stringify!(piecewise_construct_t))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL19piecewise_construct"]
            pub static piecewise_construct: root::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __pair_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct pair<_T1, _T2> {
            pub first: _T1,
            pub second: _T2,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct input_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_input_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<input_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(input_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<input_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(input_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct output_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_output_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<output_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(output_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<output_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(output_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct forward_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_forward_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<forward_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(forward_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<forward_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(forward_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bidirectional_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_bidirectional_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<bidirectional_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(bidirectional_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<bidirectional_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(bidirectional_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct random_access_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_random_access_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<random_access_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(random_access_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<random_access_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(random_access_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category<_Category> = _Category;
        pub type iterator_value_type<_Tp> = _Tp;
        pub type iterator_difference_type<_Distance> = _Distance;
        pub type iterator_pointer<_Pointer> = _Pointer;
        pub type iterator_reference<_Reference> = _Reference;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        pub type __iterator_category_t = root::std::iterator_traits;
        pub type _RequireInputIter = root::std::__enable_if_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_random_access_iter {
            pub _address: u8,
        }
        pub type __is_random_access_iter__Base = root::std::is_base_of;
        pub const __is_random_access_iter___value:
            root::std::__is_random_access_iter__bindgen_ty_1 = 0;
        pub type __is_random_access_iter__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_const_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __undefined {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __replace_first_arg {
            pub _address: u8,
        }
        pub type __replace_first_arg_t = root::std::__replace_first_arg;
        pub type __make_not_void = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptr_traits_elem_1 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptr_traits_elem {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type pointer_traits___difference_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits___rebind {
            pub _address: u8,
        }
        pub type pointer_traits_pointer<_Ptr> = _Ptr;
        pub type pointer_traits_difference_type = root::std::__detected_or_t;
        pub type pointer_traits_rebind = root::std::pointer_traits___rebind;
        pub type __ptr_rebind = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reverse_iterator<_Iterator> {
            pub current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type reverse_iterator___traits_type = root::std::iterator_traits;
        pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
        pub type reverse_iterator_pointer = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_difference_type = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_reference = root::std::reverse_iterator___traits_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct back_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type back_insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct front_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type front_insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        pub struct insert_iterator<_Container> {
            pub container: *mut _Container,
            pub iter: root::std::insert_iterator__Iter,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type insert_iterator__Iter = [u8; 0usize];
        pub type insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct move_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type move_iterator___traits_type = root::std::iterator_traits;
        pub type move_iterator___base_ref = root::std::move_iterator___traits_type;
        pub type move_iterator_iterator_type<_Iterator> = _Iterator;
        pub type move_iterator_iterator_category = root::std::move_iterator___traits_type;
        pub type move_iterator_value_type = root::std::move_iterator___traits_type;
        pub type move_iterator_difference_type = root::std::move_iterator___traits_type;
        pub type move_iterator_pointer<_Iterator> = _Iterator;
        pub type move_iterator_reference = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Deque_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_iterator {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct istreambuf_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ostreambuf_iterator {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9__fill_a1St13_Bit_iteratorS_RKb"]
            pub fn __fill_a1(
                arg1: root::std::_Bit_iterator,
                arg2: root::std::_Bit_iterator,
                arg3: *const bool,
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __lc_rai {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__lc_rai>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__lc_rai)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__lc_rai>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__lc_rai)
                )
            );
        }
        pub type streamoff = ::std::os::raw::c_long;
        pub type streamsize = isize;
        #[repr(C)]
        #[derive(Debug)]
        pub struct fpos<_StateT> {
            pub _M_off: root::std::streamoff,
            pub _M_state: _StateT,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
        }
        pub type streampos = root::std::fpos<root::__mbstate_t>;
        pub type wstreampos = root::std::fpos<root::__mbstate_t>;
        pub type u16streampos = root::std::fpos<root::__mbstate_t>;
        pub type u32streampos = root::std::fpos<root::__mbstate_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[repr(C)]
        pub struct exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct exception {
            pub vtable_: *const exception__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout_exception() {
            assert_eq!(
                ::std::mem::size_of::<exception>(),
                8usize,
                concat!("Size of: ", stringify!(exception))
            );
            assert_eq!(
                ::std::mem::align_of::<exception>(),
                8usize,
                concat!("Alignment of ", stringify!(exception))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
            pub fn exception_exception_destructor(this: *mut root::std::exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
            pub fn exception_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_alloc {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_alloc() {
            assert_eq!(
                ::std::mem::size_of::<bad_alloc>(),
                8usize,
                concat!("Size of: ", stringify!(bad_alloc))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_alloc>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_alloc))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
            pub fn bad_alloc_bad_alloc_destructor(this: *mut root::std::bad_alloc);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
            pub fn bad_alloc_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_array_new_length {
            pub _base: root::std::bad_alloc,
        }
        #[test]
        fn bindgen_test_layout_bad_array_new_length() {
            assert_eq!(
                ::std::mem::size_of::<bad_array_new_length>(),
                8usize,
                concat!("Size of: ", stringify!(bad_array_new_length))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_array_new_length>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_array_new_length))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
            pub fn bad_array_new_length_bad_array_new_length_destructor(
                this: *mut root::std::bad_array_new_length,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
            pub fn bad_array_new_length_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct nothrow_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_nothrow_t() {
            assert_eq!(
                ::std::mem::size_of::<nothrow_t>(),
                1usize,
                concat!("Size of: ", stringify!(nothrow_t))
            );
            assert_eq!(
                ::std::mem::align_of::<nothrow_t>(),
                1usize,
                concat!("Alignment of ", stringify!(nothrow_t))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7nothrow"]
            pub static nothrow: root::std::nothrow_t;
        }
        pub type new_handler = ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
            pub fn set_new_handler(arg1: root::std::new_handler) -> root::std::new_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15get_new_handlerv"]
            pub fn get_new_handler() -> root::std::new_handler;
        }
        pub type __allocator_base = root::__gnu_cxx::new_allocator;
        #[test]
        fn __bindgen_test_layout_allocator_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_value_type<_Tp> = _Tp;
        pub type allocator_size_type = root::std::size_t;
        pub type allocator_difference_type = isize;
        pub type allocator_pointer<_Tp> = *mut _Tp;
        pub type allocator_const_pointer<_Tp> = *const _Tp;
        pub type allocator_reference<_Tp> = *mut _Tp;
        pub type allocator_const_reference<_Tp> = *const _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = root::std::allocator;
        pub type allocator_propagate_on_container_move_assignment = root::std::true_type;
        pub type allocator_is_always_equal = root::std::true_type;
        #[test]
        fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        pub type __c_locale = root::__locale_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ios_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ios {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_streambuf {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_istream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ostream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_iostream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_filebuf {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ifstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_ofstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_fstream {
            pub _address: u8,
        }
        pub type ios = root::std::basic_ios;
        pub type streambuf = root::std::basic_streambuf;
        pub type istream = root::std::basic_istream;
        pub type ostream = root::std::basic_ostream;
        pub type iostream = root::std::basic_iostream;
        pub type stringbuf = root::std::basic_stringbuf;
        pub type istringstream = root::std::basic_istringstream;
        pub type ostringstream = root::std::basic_ostringstream;
        pub type stringstream = root::std::basic_stringstream;
        pub type filebuf = root::std::basic_filebuf;
        pub type ifstream = root::std::basic_ifstream;
        pub type ofstream = root::std::basic_ofstream;
        pub type fstream = root::std::basic_fstream;
        pub type wios = root::std::basic_ios;
        pub type wstreambuf = root::std::basic_streambuf;
        pub type wistream = root::std::basic_istream;
        pub type wostream = root::std::basic_ostream;
        pub type wiostream = root::std::basic_iostream;
        pub type wstringbuf = root::std::basic_stringbuf;
        pub type wistringstream = root::std::basic_istringstream;
        pub type wostringstream = root::std::basic_ostringstream;
        pub type wstringstream = root::std::basic_stringstream;
        pub type wfilebuf = root::std::basic_filebuf;
        pub type wifstream = root::std::basic_ifstream;
        pub type wofstream = root::std::basic_ofstream;
        pub type wfstream = root::std::basic_fstream;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct locale {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ctype_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ctype {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ctype_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct codecvt_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct codecvt {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct codecvt_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct num_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct num_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_put_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type<_Arg> = _Arg;
        pub type unary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type<_Arg1> = _Arg1;
        pub type binary_function_second_argument_type<_Arg2> = _Arg2;
        pub type binary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_transparent {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct plus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct minus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multiplies {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct divides {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct modulus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negate {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_plus_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::plus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::plus)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::plus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::plus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_minus_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::minus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::minus)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::minus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::minus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_multiplies_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::multiplies>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::multiplies)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::multiplies>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::multiplies)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_divides_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::divides>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::divides)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::divides>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::divides)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_modulus_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::modulus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::modulus)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::modulus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::modulus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_negate_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::negate>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::negate)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::negate>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::negate)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct not_equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less_equal {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_equal_to_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::equal_to>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::equal_to)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::equal_to>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::equal_to)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_not_equal_to_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::not_equal_to>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::not_equal_to)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::not_equal_to>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::not_equal_to)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_greater_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::greater>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::greater)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::greater>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::greater)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_less_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::less>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::less)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::less>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::less)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_greater_equal_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::greater_equal>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::greater_equal)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::greater_equal>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::greater_equal)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_less_equal_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::less_equal>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::less_equal)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::less_equal>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::less_equal)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_not {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_logical_and_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::logical_and>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_and)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::logical_and>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_and)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_logical_or_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::logical_or>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_or)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::logical_or>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_or)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_logical_not_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::logical_not>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_not)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::logical_not>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_not)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_xor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_not {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_bit_and_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::bit_and>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_and)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::bit_and>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_and)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_or_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::bit_or>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_or)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::bit_or>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_or)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_xor_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::bit_xor>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_xor)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::bit_xor>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_xor)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_not_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::bit_not>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_not)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::bit_not>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_not)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_unary_function<_Arg, _Result> {
            pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            pub _M_ptr:
                ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
            pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Identity {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select1st {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select2nd {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_is_transparent {
            pub _address: u8,
        }
        pub type __has_is_transparent_t = root::std::__has_is_transparent;
        #[repr(C)]
        pub struct binder1st<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        #[repr(C)]
        pub struct binder2nd<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct initializer_list<_E> {
            pub _M_array: root::std::initializer_list_iterator<_E>,
            pub _M_len: root::std::initializer_list_size_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
        }
        pub type initializer_list_value_type<_E> = _E;
        pub type initializer_list_reference<_E> = *const _E;
        pub type initializer_list_const_reference<_E> = *const _E;
        pub type initializer_list_size_type = root::std::size_t;
        pub type initializer_list_iterator<_E> = *const _E;
        pub type initializer_list_const_iterator<_E> = *const _E;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct valarray {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base___rebind {
            pub _address: u8,
        }
        pub type __allocator_traits_base___pointer = [u8; 0usize];
        pub type __allocator_traits_base___c_pointer = [u8; 0usize];
        pub type __allocator_traits_base___v_pointer = [u8; 0usize];
        pub type __allocator_traits_base___cv_pointer = [u8; 0usize];
        pub type __allocator_traits_base___pocca = [u8; 0usize];
        pub type __allocator_traits_base___pocma = [u8; 0usize];
        pub type __allocator_traits_base___pocs = [u8; 0usize];
        pub type __allocator_traits_base___equal = [u8; 0usize];
        #[test]
        fn bindgen_test_layout___allocator_traits_base() {
            assert_eq!(
                ::std::mem::size_of::<__allocator_traits_base>(),
                1usize,
                concat!("Size of: ", stringify!(__allocator_traits_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__allocator_traits_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__allocator_traits_base))
            );
        }
        pub type __alloc_rebind = root::std::__allocator_traits_base;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
        pub type allocator_traits_value_type = [u8; 0usize];
        pub type allocator_traits_pointer = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Ptr {
            pub _address: u8,
        }
        pub type allocator_traits__Ptr_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Diff {
            pub _address: u8,
        }
        pub type allocator_traits__Diff_type = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Size {
            pub _address: u8,
        }
        pub type allocator_traits_const_pointer = [u8; 0usize];
        pub type allocator_traits_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_const_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_difference_type = [u8; 0usize];
        pub type allocator_traits_size_type = [u8; 0usize];
        pub type allocator_traits_propagate_on_container_copy_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_move_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_swap = root::std::__detected_or_t;
        pub type allocator_traits_is_always_equal = root::std::__detected_or_t;
        pub type allocator_traits_rebind_alloc = root::std::__alloc_rebind;
        pub type allocator_traits_rebind_traits = root::std::allocator_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits___construct_helper {
            pub _address: u8,
        }
        pub type allocator_traits___construct_helper_type<_Alloc> = _Alloc;
        pub type allocator_traits___has_construct = root::std::allocator_traits___construct_helper;
        #[test]
        fn __bindgen_test_layout_allocator_traits_open0_allocator_open1_void_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator_traits)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_alloc_insertable_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        pub struct __is_copy_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct __is_move_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_allocator {
            pub _base: root::std::false_type,
        }
        pub type _RequireAllocator = u8;
        pub type _RequireNotAllocator = u8;
        extern "C" {
            #[link_name = "\u{1}_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
            pub fn getline(
                __in: *mut root::std::basic_istream,
                __str: *mut root::std::basic_string<::std::os::raw::c_char>,
                __delim: ::std::os::raw::c_char,
            ) -> *mut root::std::basic_istream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
            pub fn getline1(
                __in: *mut root::std::basic_istream,
                __str: *mut root::std::basic_string<u32>,
                __delim: u32,
            ) -> *mut root::std::basic_istream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
            pub fn _Hash_bytes(
                __ptr: *const ::std::os::raw::c_void,
                __len: root::std::size_t,
                __seed: root::std::size_t,
            ) -> root::std::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
            pub fn _Fnv_hash_bytes(
                __ptr: *const ::std::os::raw::c_void,
                __len: root::std::size_t,
                __seed: root::std::size_t,
            ) -> root::std::size_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __hash_base {
            pub _address: u8,
        }
        pub type __hash_base_result_type<_Result> = _Result;
        pub type __hash_base_argument_type<_Arg> = _Arg;
        #[repr(C)]
        #[derive(Debug)]
        pub struct __poison_hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct hash {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_bool__close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0___int128_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned___int128_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Hash_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Hash_impl() {
            assert_eq!(
                ::std::mem::size_of::<_Hash_impl>(),
                1usize,
                concat!("Size of: ", stringify!(_Hash_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<_Hash_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(_Hash_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Fnv_hash_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Fnv_hash_impl() {
            assert_eq!(
                ::std::mem::size_of::<_Fnv_hash_impl>(),
                1usize,
                concat!("Size of: ", stringify!(_Fnv_hash_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<_Fnv_hash_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(_Fnv_hash_impl))
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_float_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_fast_hash {
            pub _base: root::std::true_type,
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_long_double_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_wchar_t_char_traits_open3_wchar_t_close3_allocator_open3_wchar_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char16_t_char_traits_open3_char16_t_close3_allocator_open3_char16_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char32_t_char_traits_open3_char32_t_close3_allocator_open3_char32_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        extern "C" {
            pub static npos: root::std::basic_string_size_type;
        }
        #[test]
        fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_string<::std::os::raw::c_char>>(),
                32usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_string<::std::os::raw::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_string<::std::os::raw::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_string<::std::os::raw::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_string<u32>>(),
                32usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_string<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_string<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_string<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_void_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = root::__gnu_cxx::__add_unsigned___if_type;
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = root::__gnu_cxx::__remove_unsigned___if_type;
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        pub type __promote___type = f64;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_2 {
            pub _address: u8,
        }
        pub type __promote_2___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_3 {
            pub _address: u8,
        }
        pub type __promote_3___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_4 {
            pub _address: u8,
        }
        pub type __promote_4___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer_nonstrict {
            pub _address: u8,
        }
        pub const __is_integer_nonstrict___width:
            root::__gnu_cxx::__is_integer_nonstrict__bindgen_ty_1 = 0;
        pub type __is_integer_nonstrict__bindgen_ty_1 = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        extern "C" {
            pub static __min: _Value;
        }
        extern "C" {
            pub static __max: _Value;
        }
        extern "C" {
            pub static __is_signed: bool;
        }
        extern "C" {
            pub static __digits: ::std::os::raw::c_int;
        }
        pub type __int_traits = root::__gnu_cxx::__numeric_traits_integer;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        extern "C" {
            pub static __max_digits10: ::std::os::raw::c_int;
        }
        extern "C" {
            pub static __digits10: ::std::os::raw::c_int;
        }
        extern "C" {
            pub static __max_exponent10: ::std::os::raw::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___numeric_traits_open0_float_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__numeric_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__numeric_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__numeric_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__numeric_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___numeric_traits_open0_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__numeric_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__numeric_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__numeric_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__numeric_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___numeric_traits_open0_long_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__numeric_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__numeric_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__numeric_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__numeric_traits)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __normal_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type __normal_iterator___traits_type = root::std::iterator_traits;
        pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
        pub type __normal_iterator_iterator_category =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_value_type = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_difference_type =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_reference = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_pointer = root::__gnu_cxx::__normal_iterator___traits_type;
        pub mod __ops {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_less_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_less_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_less_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_less_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_less_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_less_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_less_val {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_less_val() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_less_val>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_less_val))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_less_val>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_less_val))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_less_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Val_less_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Val_less_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Val_less_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Val_less_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Val_less_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equal_to_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_equal_to_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_equal_to_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_equal_to_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_equal_to_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_equal_to_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equal_to_val {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_equal_to_val() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_equal_to_val>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_equal_to_val))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_equal_to_val>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_equal_to_val))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_val<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_val<_Value> {
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_iter<_Iterator1> {
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_pred<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_val<_Compare, _Value> {
                pub _M_comp: _Compare,
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
                pub _M_comp: _Compare,
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_negate<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Char_types {
            pub _address: u8,
        }
        pub type _Char_types_int_type = ::std::os::raw::c_ulong;
        pub type _Char_types_pos_type = root::std::streampos;
        pub type _Char_types_off_type = root::std::streamoff;
        pub type _Char_types_state_type = root::__mbstate_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type char_traits_char_type<_CharT> = _CharT;
        pub type char_traits_int_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_pos_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_off_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_state_type = root::__gnu_cxx::_Char_types;
        #[repr(C)]
        #[derive(Debug)]
        pub struct new_allocator {
            pub _address: u8,
        }
        pub type new_allocator_value_type<_Tp> = _Tp;
        pub type new_allocator_size_type = root::std::size_t;
        pub type new_allocator_difference_type = isize;
        pub type new_allocator_pointer<_Tp> = *mut _Tp;
        pub type new_allocator_const_pointer<_Tp> = *const _Tp;
        pub type new_allocator_reference<_Tp> = *mut _Tp;
        pub type new_allocator_const_reference<_Tp> = *const _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct new_allocator_rebind {
            pub _address: u8,
        }
        pub type new_allocator_propagate_on_container_move_assignment = root::std::true_type;
        extern "C" {
            pub fn __uselocale(arg1: root::locale_t) -> root::locale_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits {
            pub _address: u8,
        }
        pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
        pub type __alloc_traits__Base_type = root::std::allocator_traits;
        pub type __alloc_traits_value_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_const_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_size_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_difference_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_reference = *mut root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits_const_reference = *const root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits___is_custom_pointer = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits_rebind {
            pub _address: u8,
        }
        pub type __alloc_traits_rebind_other = root::__gnu_cxx::__alloc_traits__Base_type;
    }
    pub mod __gnu_debug {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Safe_iterator {
            pub _address: u8,
        }
    }
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    pub type size_t = ::std::os::raw::c_ulong;
    pub type va_list = root::__builtin_va_list;
    pub type __gnuc_va_list = root::__builtin_va_list;
    pub type wint_t = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        fn test_field___wch() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__mbstate_t__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__mbstate_t__bindgen_ty_1),
                    "::",
                    stringify!(__wch)
                )
            );
        }
        test_field___wch();
        fn test_field___wchb() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__mbstate_t__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__mbstate_t__bindgen_ty_1),
                    "::",
                    stringify!(__wchb)
                )
            );
        }
        test_field___wchb();
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        fn test_field___count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__mbstate_t),
                    "::",
                    stringify!(__count)
                )
            );
        }
        test_field___count();
        fn test_field___value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__mbstate_t),
                    "::",
                    stringify!(__value)
                )
            );
        }
        test_field___value();
    }
    pub type mbstate_t = root::__mbstate_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::std::os::raw::c_ushort,
        pub __ctype_tolower: *const ::std::os::raw::c_int,
        pub __ctype_toupper: *const ::std::os::raw::c_int,
        pub __names: [*const ::std::os::raw::c_char; 13usize],
    }
    #[test]
    fn bindgen_test_layout___locale_struct() {
        assert_eq!(
            ::std::mem::size_of::<__locale_struct>(),
            232usize,
            concat!("Size of: ", stringify!(__locale_struct))
        );
        assert_eq!(
            ::std::mem::align_of::<__locale_struct>(),
            8usize,
            concat!("Alignment of ", stringify!(__locale_struct))
        );
        fn test_field___locales() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__locale_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__locale_struct),
                    "::",
                    stringify!(__locales)
                )
            );
        }
        test_field___locales();
        fn test_field___ctype_b() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__locale_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__locale_struct),
                    "::",
                    stringify!(__ctype_b)
                )
            );
        }
        test_field___ctype_b();
        fn test_field___ctype_tolower() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__locale_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__locale_struct),
                    "::",
                    stringify!(__ctype_tolower)
                )
            );
        }
        test_field___ctype_tolower();
        fn test_field___ctype_toupper() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__locale_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__locale_struct),
                    "::",
                    stringify!(__ctype_toupper)
                )
            );
        }
        test_field___ctype_toupper();
        fn test_field___names() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__locale_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__locale_struct),
                    "::",
                    stringify!(__names)
                )
            );
        }
        test_field___names();
    }
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    extern "C" {
        pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncmp(
            __s1: *const u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncasecmp(
            __s1: *const u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __n: root::size_t,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: root::size_t) -> root::size_t;
    }
    extern "C" {
        pub fn wcscoll_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsxfrm_l(
            __s1: *mut u32,
            __s2: *const u32,
            __n: root::size_t,
            __loc: root::locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcsdup(__s: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> root::size_t;
    }
    extern "C" {
        pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> root::size_t;
    }
    extern "C" {
        pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcslen(__s: *const u32) -> root::size_t;
    }
    extern "C" {
        pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsnlen(__s: *const u32, __maxlen: root::size_t) -> root::size_t;
    }
    extern "C" {
        pub fn wmemchr(__s: *const u32, __c: u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn wmemcmp(
            __s1: *const u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn wmemset(__s: *mut u32, __c: u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn btowc(__c: ::std::os::raw::c_int) -> root::wint_t;
    }
    extern "C" {
        pub fn wctob(__c: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbsinit(__ps: *const root::mbstate_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbrtowc(
            __pwc: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
            __p: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcrtomb(
            __s: *mut ::std::os::raw::c_char,
            __wc: u32,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn __mbrlen(
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn mbrlen(
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn mbsrtowcs(
            __dst: *mut u32,
            __src: *mut *const ::std::os::raw::c_char,
            __len: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcsrtombs(
            __dst: *mut ::std::os::raw::c_char,
            __src: *mut *const u32,
            __len: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn mbsnrtowcs(
            __dst: *mut u32,
            __src: *mut *const ::std::os::raw::c_char,
            __nmc: root::size_t,
            __len: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcsnrtombs(
            __dst: *mut ::std::os::raw::c_char,
            __src: *mut *const u32,
            __nwc: root::size_t,
            __len: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcswidth(__s: *const u32, __n: root::size_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
    }
    extern "C" {
        pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
    }
    extern "C" {
        pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> u128;
    }
    extern "C" {
        pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float32;
    }
    extern "C" {
        pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float64;
    }
    extern "C" {
        pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float64x;
    }
    extern "C" {
        pub fn wcstol(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn wcstoul(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn wcstoll(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstoull(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstoq(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstouq(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstol_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn wcstoul_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn wcstoll_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstoull_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: root::locale_t) -> f64;
    }
    extern "C" {
        pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: root::locale_t) -> f32;
    }
    extern "C" {
        pub fn wcstold_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> u128;
    }
    extern "C" {
        pub fn wcstof32_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn wcstof64_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn wcstof32x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn open_wmemstream(
            __bufloc: *mut *mut u32,
            __sizeloc: *mut root::size_t,
        ) -> *mut root::__FILE;
    }
    extern "C" {
        pub fn fwide(
            __fp: *mut root::__FILE,
            __mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fwprintf(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn swprintf(
            __s: *mut u32,
            __n: root::size_t,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfwprintf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vwprintf(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vswprintf(
            __s: *mut u32,
            __n: root::size_t,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fwscanf(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_fwscanf"]
        pub fn fwscanf1(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_wscanf"]
        pub fn wscanf1(__format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_swscanf"]
        pub fn swscanf1(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfwscanf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vwscanf(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vswscanf(
            __s: *const u32,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vfwscanf"]
        pub fn vfwscanf1(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vwscanf"]
        pub fn vwscanf1(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vswscanf"]
        pub fn vswscanf1(
            __s: *const u32,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar() -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar(__wc: u32) -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws(
            __ws: *mut u32,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn fputws(__ws: *const u32, __stream: *mut root::__FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetwc(__wc: root::wint_t, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar_unlocked() -> root::wint_t;
    }
    extern "C" {
        pub fn fgetwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc_unlocked(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwc_unlocked(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar_unlocked(__wc: u32) -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws_unlocked(
            __ws: *mut u32,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn fputws_unlocked(
            __ws: *const u32,
            __stream: *mut root::__FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsftime(
            __s: *mut u32,
            __maxsize: root::size_t,
            __format: *const u32,
            __tp: *const root::tm,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcsftime_l(
            __s: *mut u32,
            __maxsize: root::size_t,
            __format: *const u32,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> root::size_t;
    }
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        fn test_field___val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__fsid_t),
                    "::",
                    stringify!(__val)
                )
            );
        }
        test_field___val();
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __suseconds64_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lconv {
        pub decimal_point: *mut ::std::os::raw::c_char,
        pub thousands_sep: *mut ::std::os::raw::c_char,
        pub grouping: *mut ::std::os::raw::c_char,
        pub int_curr_symbol: *mut ::std::os::raw::c_char,
        pub currency_symbol: *mut ::std::os::raw::c_char,
        pub mon_decimal_point: *mut ::std::os::raw::c_char,
        pub mon_thousands_sep: *mut ::std::os::raw::c_char,
        pub mon_grouping: *mut ::std::os::raw::c_char,
        pub positive_sign: *mut ::std::os::raw::c_char,
        pub negative_sign: *mut ::std::os::raw::c_char,
        pub int_frac_digits: ::std::os::raw::c_char,
        pub frac_digits: ::std::os::raw::c_char,
        pub p_cs_precedes: ::std::os::raw::c_char,
        pub p_sep_by_space: ::std::os::raw::c_char,
        pub n_cs_precedes: ::std::os::raw::c_char,
        pub n_sep_by_space: ::std::os::raw::c_char,
        pub p_sign_posn: ::std::os::raw::c_char,
        pub n_sign_posn: ::std::os::raw::c_char,
        pub int_p_cs_precedes: ::std::os::raw::c_char,
        pub int_p_sep_by_space: ::std::os::raw::c_char,
        pub int_n_cs_precedes: ::std::os::raw::c_char,
        pub int_n_sep_by_space: ::std::os::raw::c_char,
        pub int_p_sign_posn: ::std::os::raw::c_char,
        pub int_n_sign_posn: ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_lconv() {
        assert_eq!(
            ::std::mem::size_of::<lconv>(),
            96usize,
            concat!("Size of: ", stringify!(lconv))
        );
        assert_eq!(
            ::std::mem::align_of::<lconv>(),
            8usize,
            concat!("Alignment of ", stringify!(lconv))
        );
        fn test_field_decimal_point() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).decimal_point) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(decimal_point)
                )
            );
        }
        test_field_decimal_point();
        fn test_field_thousands_sep() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).thousands_sep) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(thousands_sep)
                )
            );
        }
        test_field_thousands_sep();
        fn test_field_grouping() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).grouping) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(grouping)
                )
            );
        }
        test_field_grouping();
        fn test_field_int_curr_symbol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).int_curr_symbol) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(int_curr_symbol)
                )
            );
        }
        test_field_int_curr_symbol();
        fn test_field_currency_symbol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).currency_symbol) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(currency_symbol)
                )
            );
        }
        test_field_currency_symbol();
        fn test_field_mon_decimal_point() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mon_decimal_point) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(mon_decimal_point)
                )
            );
        }
        test_field_mon_decimal_point();
        fn test_field_mon_thousands_sep() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mon_thousands_sep) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(mon_thousands_sep)
                )
            );
        }
        test_field_mon_thousands_sep();
        fn test_field_mon_grouping() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mon_grouping) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(mon_grouping)
                )
            );
        }
        test_field_mon_grouping();
        fn test_field_positive_sign() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).positive_sign) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(positive_sign)
                )
            );
        }
        test_field_positive_sign();
        fn test_field_negative_sign() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).negative_sign) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(negative_sign)
                )
            );
        }
        test_field_negative_sign();
        fn test_field_int_frac_digits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).int_frac_digits) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(int_frac_digits)
                )
            );
        }
        test_field_int_frac_digits();
        fn test_field_frac_digits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).frac_digits) as usize - ptr as usize
                },
                81usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(frac_digits)
                )
            );
        }
        test_field_frac_digits();
        fn test_field_p_cs_precedes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p_cs_precedes) as usize - ptr as usize
                },
                82usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(p_cs_precedes)
                )
            );
        }
        test_field_p_cs_precedes();
        fn test_field_p_sep_by_space() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p_sep_by_space) as usize - ptr as usize
                },
                83usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(p_sep_by_space)
                )
            );
        }
        test_field_p_sep_by_space();
        fn test_field_n_cs_precedes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).n_cs_precedes) as usize - ptr as usize
                },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(n_cs_precedes)
                )
            );
        }
        test_field_n_cs_precedes();
        fn test_field_n_sep_by_space() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).n_sep_by_space) as usize - ptr as usize
                },
                85usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(n_sep_by_space)
                )
            );
        }
        test_field_n_sep_by_space();
        fn test_field_p_sign_posn() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p_sign_posn) as usize - ptr as usize
                },
                86usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(p_sign_posn)
                )
            );
        }
        test_field_p_sign_posn();
        fn test_field_n_sign_posn() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).n_sign_posn) as usize - ptr as usize
                },
                87usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(n_sign_posn)
                )
            );
        }
        test_field_n_sign_posn();
        fn test_field_int_p_cs_precedes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).int_p_cs_precedes) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(int_p_cs_precedes)
                )
            );
        }
        test_field_int_p_cs_precedes();
        fn test_field_int_p_sep_by_space() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).int_p_sep_by_space) as usize - ptr as usize
                },
                89usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(int_p_sep_by_space)
                )
            );
        }
        test_field_int_p_sep_by_space();
        fn test_field_int_n_cs_precedes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).int_n_cs_precedes) as usize - ptr as usize
                },
                90usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(int_n_cs_precedes)
                )
            );
        }
        test_field_int_n_cs_precedes();
        fn test_field_int_n_sep_by_space() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).int_n_sep_by_space) as usize - ptr as usize
                },
                91usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(int_n_sep_by_space)
                )
            );
        }
        test_field_int_n_sep_by_space();
        fn test_field_int_p_sign_posn() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).int_p_sign_posn) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(int_p_sign_posn)
                )
            );
        }
        test_field_int_p_sign_posn();
        fn test_field_int_n_sign_posn() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lconv>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).int_n_sign_posn) as usize - ptr as usize
                },
                93usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lconv),
                    "::",
                    stringify!(int_n_sign_posn)
                )
            );
        }
        test_field_int_n_sign_posn();
    }
    extern "C" {
        pub fn setlocale(
            __category: ::std::os::raw::c_int,
            __locale: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn localeconv() -> *mut root::lconv;
    }
    extern "C" {
        pub fn newlocale(
            __category_mask: ::std::os::raw::c_int,
            __locale: *const ::std::os::raw::c_char,
            __base: root::locale_t,
        ) -> root::locale_t;
    }
    extern "C" {
        pub fn duplocale(__dataset: root::locale_t) -> root::locale_t;
    }
    extern "C" {
        pub fn freelocale(__dataset: root::locale_t);
    }
    extern "C" {
        pub fn uselocale(__dataset: root::locale_t) -> root::locale_t;
    }
    pub const _ISupper: root::_bindgen_ty_38 = 256;
    pub const _ISlower: root::_bindgen_ty_38 = 512;
    pub const _ISalpha: root::_bindgen_ty_38 = 1024;
    pub const _ISdigit: root::_bindgen_ty_38 = 2048;
    pub const _ISxdigit: root::_bindgen_ty_38 = 4096;
    pub const _ISspace: root::_bindgen_ty_38 = 8192;
    pub const _ISprint: root::_bindgen_ty_38 = 16384;
    pub const _ISgraph: root::_bindgen_ty_38 = 32768;
    pub const _ISblank: root::_bindgen_ty_38 = 1;
    pub const _IScntrl: root::_bindgen_ty_38 = 2;
    pub const _ISpunct: root::_bindgen_ty_38 = 4;
    pub const _ISalnum: root::_bindgen_ty_38 = 8;
    pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
    extern "C" {
        pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn __ctype_tolower_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn __ctype_toupper_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isctype(
            __c: ::std::os::raw::c_int,
            __mask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalnum_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __tolower_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower_l(__c: ::std::os::raw::c_int, __l: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __toupper_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper_l(__c: ::std::os::raw::c_int, __l: root::locale_t) -> ::std::os::raw::c_int;
    }
    pub mod __cxxabiv1 {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        pub struct __forced_unwind__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct __forced_unwind {
            pub vtable_: *const __forced_unwind__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout___forced_unwind() {
            assert_eq!(
                ::std::mem::size_of::<__forced_unwind>(),
                8usize,
                concat!("Size of: ", stringify!(__forced_unwind))
            );
            assert_eq!(
                ::std::mem::align_of::<__forced_unwind>(),
                8usize,
                concat!("Alignment of ", stringify!(__forced_unwind))
            );
        }
    }
    pub type time_t = root::__time_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[test]
    fn bindgen_test_layout_timespec() {
        assert_eq!(
            ::std::mem::size_of::<timespec>(),
            16usize,
            concat!("Size of: ", stringify!(timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(timespec))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timespec),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timespec),
                    "::",
                    stringify!(tv_nsec)
                )
            );
        }
        test_field_tv_nsec();
    }
    pub type pid_t = root::__pid_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sched_param {
        pub sched_priority: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_sched_param() {
        assert_eq!(
            ::std::mem::size_of::<sched_param>(),
            4usize,
            concat!("Size of: ", stringify!(sched_param))
        );
        assert_eq!(
            ::std::mem::align_of::<sched_param>(),
            4usize,
            concat!("Alignment of ", stringify!(sched_param))
        );
        fn test_field_sched_priority() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<sched_param>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sched_priority) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sched_param),
                    "::",
                    stringify!(sched_priority)
                )
            );
        }
        test_field_sched_priority();
    }
    extern "C" {
        pub fn clone(
            __fn: ::std::option::Option<
                unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
            >,
            __child_stack: *mut ::std::os::raw::c_void,
            __flags: ::std::os::raw::c_int,
            __arg: *mut ::std::os::raw::c_void,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getcpu() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getcpu(
            arg1: *mut ::std::os::raw::c_uint,
            arg2: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setns(
            __fd: ::std::os::raw::c_int,
            __nstype: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type __cpu_mask = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct cpu_set_t {
        pub __bits: [root::__cpu_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_cpu_set_t() {
        assert_eq!(
            ::std::mem::size_of::<cpu_set_t>(),
            128usize,
            concat!("Size of: ", stringify!(cpu_set_t))
        );
        assert_eq!(
            ::std::mem::align_of::<cpu_set_t>(),
            8usize,
            concat!("Alignment of ", stringify!(cpu_set_t))
        );
        fn test_field___bits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<cpu_set_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(cpu_set_t),
                    "::",
                    stringify!(__bits)
                )
            );
        }
        test_field___bits();
    }
    extern "C" {
        pub fn __sched_cpucount(
            __setsize: root::size_t,
            __setp: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __sched_cpualloc(__count: root::size_t) -> *mut root::cpu_set_t;
    }
    extern "C" {
        pub fn __sched_cpufree(__set: *mut root::cpu_set_t);
    }
    extern "C" {
        pub fn sched_setparam(
            __pid: root::__pid_t,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getparam(
            __pid: root::__pid_t,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_setscheduler(
            __pid: root::__pid_t,
            __policy: ::std::os::raw::c_int,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getscheduler(__pid: root::__pid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_rr_get_interval(
            __pid: root::__pid_t,
            __t: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_setaffinity(
            __pid: root::__pid_t,
            __cpusetsize: root::size_t,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getaffinity(
            __pid: root::__pid_t,
            __cpusetsize: root::size_t,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        assert_eq!(
            ::std::mem::size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timeval),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_usec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timeval),
                    "::",
                    stringify!(tv_usec)
                )
            );
        }
        test_field_tv_usec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timex {
        pub modes: ::std::os::raw::c_uint,
        pub offset: root::__syscall_slong_t,
        pub freq: root::__syscall_slong_t,
        pub maxerror: root::__syscall_slong_t,
        pub esterror: root::__syscall_slong_t,
        pub status: ::std::os::raw::c_int,
        pub constant: root::__syscall_slong_t,
        pub precision: root::__syscall_slong_t,
        pub tolerance: root::__syscall_slong_t,
        pub time: root::timeval,
        pub tick: root::__syscall_slong_t,
        pub ppsfreq: root::__syscall_slong_t,
        pub jitter: root::__syscall_slong_t,
        pub shift: ::std::os::raw::c_int,
        pub stabil: root::__syscall_slong_t,
        pub jitcnt: root::__syscall_slong_t,
        pub calcnt: root::__syscall_slong_t,
        pub errcnt: root::__syscall_slong_t,
        pub stbcnt: root::__syscall_slong_t,
        pub tai: ::std::os::raw::c_int,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 44usize]>,
    }
    #[test]
    fn bindgen_test_layout_timex() {
        assert_eq!(
            ::std::mem::size_of::<timex>(),
            208usize,
            concat!("Size of: ", stringify!(timex))
        );
        assert_eq!(
            ::std::mem::align_of::<timex>(),
            8usize,
            concat!("Alignment of ", stringify!(timex))
        );
        fn test_field_modes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).modes) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(modes)
                )
            );
        }
        test_field_modes();
        fn test_field_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(offset)
                )
            );
        }
        test_field_offset();
        fn test_field_freq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(freq)
                )
            );
        }
        test_field_freq();
        fn test_field_maxerror() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxerror) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(maxerror)
                )
            );
        }
        test_field_maxerror();
        fn test_field_esterror() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).esterror) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(esterror)
                )
            );
        }
        test_field_esterror();
        fn test_field_status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(status)
                )
            );
        }
        test_field_status();
        fn test_field_constant() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(constant)
                )
            );
        }
        test_field_constant();
        fn test_field_precision() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(precision)
                )
            );
        }
        test_field_precision();
        fn test_field_tolerance() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tolerance) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(tolerance)
                )
            );
        }
        test_field_tolerance();
        fn test_field_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(time)
                )
            );
        }
        test_field_time();
        fn test_field_tick() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(tick)
                )
            );
        }
        test_field_tick();
        fn test_field_ppsfreq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ppsfreq) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(ppsfreq)
                )
            );
        }
        test_field_ppsfreq();
        fn test_field_jitter() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jitter) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(jitter)
                )
            );
        }
        test_field_jitter();
        fn test_field_shift() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(shift)
                )
            );
        }
        test_field_shift();
        fn test_field_stabil() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stabil) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(stabil)
                )
            );
        }
        test_field_stabil();
        fn test_field_jitcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jitcnt) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(jitcnt)
                )
            );
        }
        test_field_jitcnt();
        fn test_field_calcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).calcnt) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(calcnt)
                )
            );
        }
        test_field_calcnt();
        fn test_field_errcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).errcnt) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(errcnt)
                )
            );
        }
        test_field_errcnt();
        fn test_field_stbcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stbcnt) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(stbcnt)
                )
            );
        }
        test_field_stbcnt();
        fn test_field_tai() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tai) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timex),
                    "::",
                    stringify!(tai)
                )
            );
        }
        test_field_tai();
    }
    extern "C" {
        pub fn clock_adjtime(
            __clock_id: root::__clockid_t,
            __utx: *mut root::timex,
        ) -> ::std::os::raw::c_int;
    }
    pub type clock_t = root::__clock_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tm {
        pub tm_sec: ::std::os::raw::c_int,
        pub tm_min: ::std::os::raw::c_int,
        pub tm_hour: ::std::os::raw::c_int,
        pub tm_mday: ::std::os::raw::c_int,
        pub tm_mon: ::std::os::raw::c_int,
        pub tm_year: ::std::os::raw::c_int,
        pub tm_wday: ::std::os::raw::c_int,
        pub tm_yday: ::std::os::raw::c_int,
        pub tm_isdst: ::std::os::raw::c_int,
        pub tm_gmtoff: ::std::os::raw::c_long,
        pub tm_zone: *const ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_tm() {
        assert_eq!(
            ::std::mem::size_of::<tm>(),
            56usize,
            concat!("Size of: ", stringify!(tm))
        );
        assert_eq!(
            ::std::mem::align_of::<tm>(),
            8usize,
            concat!("Alignment of ", stringify!(tm))
        );
        fn test_field_tm_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_sec)
                )
            );
        }
        test_field_tm_sec();
        fn test_field_tm_min() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_min)
                )
            );
        }
        test_field_tm_min();
        fn test_field_tm_hour() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_hour)
                )
            );
        }
        test_field_tm_hour();
        fn test_field_tm_mday() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_mday)
                )
            );
        }
        test_field_tm_mday();
        fn test_field_tm_mon() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_mon)
                )
            );
        }
        test_field_tm_mon();
        fn test_field_tm_year() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_year)
                )
            );
        }
        test_field_tm_year();
        fn test_field_tm_wday() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_wday)
                )
            );
        }
        test_field_tm_wday();
        fn test_field_tm_yday() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_yday)
                )
            );
        }
        test_field_tm_yday();
        fn test_field_tm_isdst() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_isdst)
                )
            );
        }
        test_field_tm_isdst();
        fn test_field_tm_gmtoff() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_gmtoff)
                )
            );
        }
        test_field_tm_gmtoff();
        fn test_field_tm_zone() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(tm),
                    "::",
                    stringify!(tm_zone)
                )
            );
        }
        test_field_tm_zone();
    }
    pub type clockid_t = root::__clockid_t;
    pub type timer_t = root::__timer_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct itimerspec {
        pub it_interval: root::timespec,
        pub it_value: root::timespec,
    }
    #[test]
    fn bindgen_test_layout_itimerspec() {
        assert_eq!(
            ::std::mem::size_of::<itimerspec>(),
            32usize,
            concat!("Size of: ", stringify!(itimerspec))
        );
        assert_eq!(
            ::std::mem::align_of::<itimerspec>(),
            8usize,
            concat!("Alignment of ", stringify!(itimerspec))
        );
        fn test_field_it_interval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<itimerspec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(itimerspec),
                    "::",
                    stringify!(it_interval)
                )
            );
        }
        test_field_it_interval();
        fn test_field_it_value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<itimerspec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(itimerspec),
                    "::",
                    stringify!(it_value)
                )
            );
        }
        test_field_it_value();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigevent {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn clock() -> root::clock_t;
    }
    extern "C" {
        pub fn time(__timer: *mut root::time_t) -> root::time_t;
    }
    extern "C" {
        pub fn difftime(__time1: root::time_t, __time0: root::time_t) -> f64;
    }
    extern "C" {
        pub fn mktime(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn strftime(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __tp: *const root::tm,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn strptime(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __tp: *mut root::tm,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strftime_l(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn strptime_l(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __tp: *mut root::tm,
            __loc: root::locale_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gmtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn gmtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn asctime(__tp: *const root::tm) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime(__timer: *const root::time_t) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn asctime_r(
            __tp: *const root::tm,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime_r(
            __timer: *const root::time_t,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        pub static mut __daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut __timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        pub fn tzset();
    }
    extern "C" {
        pub static mut daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn timegm(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn timelocal(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nanosleep(
            __requested_time: *const root::timespec,
            __remaining: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getres(
            __clock_id: root::clockid_t,
            __res: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_gettime(
            __clock_id: root::clockid_t,
            __tp: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_settime(
            __clock_id: root::clockid_t,
            __tp: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_nanosleep(
            __clock_id: root::clockid_t,
            __flags: ::std::os::raw::c_int,
            __req: *const root::timespec,
            __rem: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getcpuclockid(
            __pid: root::pid_t,
            __clock_id: *mut root::clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_create(
            __clock_id: root::clockid_t,
            __evp: *mut root::sigevent,
            __timerid: *mut root::timer_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_delete(__timerid: root::timer_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_settime(
            __timerid: root::timer_t,
            __flags: ::std::os::raw::c_int,
            __value: *const root::itimerspec,
            __ovalue: *mut root::itimerspec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_gettime(
            __timerid: root::timer_t,
            __value: *mut root::itimerspec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_getoverrun(__timerid: root::timer_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timespec_get(
            __ts: *mut root::timespec,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timespec_getres(
            __ts: *mut root::timespec,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut getdate_err: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut root::tm;
    }
    extern "C" {
        pub fn getdate_r(
            __string: *const ::std::os::raw::c_char,
            __resbufp: *mut root::tm,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __atomic_wide_counter {
        pub __value64: ::std::os::raw::c_ulonglong,
        pub __value32: root::__atomic_wide_counter__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __atomic_wide_counter__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__atomic_wide_counter__bindgen_ty_1)
            )
        );
        fn test_field___low() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__atomic_wide_counter__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__atomic_wide_counter__bindgen_ty_1),
                    "::",
                    stringify!(__low)
                )
            );
        }
        test_field___low();
        fn test_field___high() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__atomic_wide_counter__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__atomic_wide_counter__bindgen_ty_1),
                    "::",
                    stringify!(__high)
                )
            );
        }
        test_field___high();
    }
    #[test]
    fn bindgen_test_layout___atomic_wide_counter() {
        assert_eq!(
            ::std::mem::size_of::<__atomic_wide_counter>(),
            8usize,
            concat!("Size of: ", stringify!(__atomic_wide_counter))
        );
        assert_eq!(
            ::std::mem::align_of::<__atomic_wide_counter>(),
            8usize,
            concat!("Alignment of ", stringify!(__atomic_wide_counter))
        );
        fn test_field___value64() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__atomic_wide_counter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__atomic_wide_counter),
                    "::",
                    stringify!(__value64)
                )
            );
        }
        test_field___value64();
        fn test_field___value32() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__atomic_wide_counter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__atomic_wide_counter),
                    "::",
                    stringify!(__value32)
                )
            );
        }
        test_field___value32();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        fn test_field___prev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_internal_list),
                    "::",
                    stringify!(__prev)
                )
            );
        }
        test_field___prev();
        fn test_field___next() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_internal_list),
                    "::",
                    stringify!(__next)
                )
            );
        }
        test_field___next();
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut root::__pthread_internal_slist,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_slist() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_slist>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_internal_slist))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_slist>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_slist))
        );
        fn test_field___next() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_internal_slist>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_internal_slist),
                    "::",
                    stringify!(__next)
                )
            );
        }
        test_field___next();
    }
    pub type __pthread_slist_t = root::__pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_short,
        pub __elision: ::std::os::raw::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        fn test_field___lock() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__lock)
                )
            );
        }
        test_field___lock();
        fn test_field___count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__count)
                )
            );
        }
        test_field___count();
        fn test_field___owner() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__owner)
                )
            );
        }
        test_field___owner();
        fn test_field___nusers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__nusers)
                )
            );
        }
        test_field___nusers();
        fn test_field___kind() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__kind)
                )
            );
        }
        test_field___kind();
        fn test_field___spins() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__spins)
                )
            );
        }
        test_field___spins();
        fn test_field___elision() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize
                },
                22usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__elision)
                )
            );
        }
        test_field___elision();
        fn test_field___list() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__list)
                )
            );
        }
        test_field___list();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::std::os::raw::c_uint,
        pub __writers: ::std::os::raw::c_uint,
        pub __wrphase_futex: ::std::os::raw::c_uint,
        pub __writers_futex: ::std::os::raw::c_uint,
        pub __pad3: ::std::os::raw::c_uint,
        pub __pad4: ::std::os::raw::c_uint,
        pub __cur_writer: ::std::os::raw::c_int,
        pub __shared: ::std::os::raw::c_int,
        pub __rwelision: ::std::os::raw::c_schar,
        pub __pad1: [::std::os::raw::c_uchar; 7usize],
        pub __pad2: ::std::os::raw::c_ulong,
        pub __flags: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_rwlock_arch_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
            56usize,
            concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
        );
        fn test_field___readers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__readers)
                )
            );
        }
        test_field___readers();
        fn test_field___writers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__writers)
                )
            );
        }
        test_field___writers();
        fn test_field___wrphase_futex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__wrphase_futex)
                )
            );
        }
        test_field___wrphase_futex();
        fn test_field___writers_futex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__writers_futex)
                )
            );
        }
        test_field___writers_futex();
        fn test_field___pad3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__pad3)
                )
            );
        }
        test_field___pad3();
        fn test_field___pad4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__pad4)
                )
            );
        }
        test_field___pad4();
        fn test_field___cur_writer() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__cur_writer)
                )
            );
        }
        test_field___cur_writer();
        fn test_field___shared() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__shared)
                )
            );
        }
        test_field___shared();
        fn test_field___rwelision() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__rwelision)
                )
            );
        }
        test_field___rwelision();
        fn test_field___pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
                },
                33usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__pad1)
                )
            );
        }
        test_field___pad1();
        fn test_field___pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__pad2)
                )
            );
        }
        test_field___pad2();
        fn test_field___flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__flags)
                )
            );
        }
        test_field___flags();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __wseq: root::__atomic_wide_counter,
        pub __g1_start: root::__atomic_wide_counter,
        pub __g_refs: [::std::os::raw::c_uint; 2usize],
        pub __g_size: [::std::os::raw::c_uint; 2usize],
        pub __g1_orig_size: ::std::os::raw::c_uint,
        pub __wrefs: ::std::os::raw::c_uint,
        pub __g_signals: [::std::os::raw::c_uint; 2usize],
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s>(),
            48usize,
            concat!("Size of: ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s))
        );
        fn test_field___wseq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__wseq)
                )
            );
        }
        test_field___wseq();
        fn test_field___g1_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g1_start)
                )
            );
        }
        test_field___g1_start();
        fn test_field___g_refs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g_refs)
                )
            );
        }
        test_field___g_refs();
        fn test_field___g_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g_size)
                )
            );
        }
        test_field___g_size();
        fn test_field___g1_orig_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g1_orig_size)
                )
            );
        }
        test_field___g1_orig_size();
        fn test_field___wrefs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__wrefs)
                )
            );
        }
        test_field___wrefs();
        fn test_field___g_signals() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g_signals)
                )
            );
        }
        test_field___g_signals();
    }
    pub type __tss_t = ::std::os::raw::c_uint;
    pub type __thrd_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __once_flag {
        pub __data: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___once_flag() {
        assert_eq!(
            ::std::mem::size_of::<__once_flag>(),
            4usize,
            concat!("Size of: ", stringify!(__once_flag))
        );
        assert_eq!(
            ::std::mem::align_of::<__once_flag>(),
            4usize,
            concat!("Alignment of ", stringify!(__once_flag))
        );
        fn test_field___data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__once_flag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__once_flag),
                    "::",
                    stringify!(__data)
                )
            );
        }
        test_field___data();
    }
    pub type pthread_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutexattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_mutexattr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutexattr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutexattr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_condattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_condattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_condattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_condattr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_condattr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_condattr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    pub type pthread_key_t = ::std::os::raw::c_uint;
    pub type pthread_once_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_attr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_attr_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_attr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_attr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_attr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_attr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::std::os::raw::c_char; 40usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        fn test_field___data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutex_t),
                    "::",
                    stringify!(__data)
                )
            );
        }
        test_field___data();
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutex_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutex_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::std::os::raw::c_char; 48usize],
        pub __align: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_pthread_cond_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_cond_t>(),
            48usize,
            concat!("Size of: ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_cond_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_cond_t))
        );
        fn test_field___data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_cond_t),
                    "::",
                    stringify!(__data)
                )
            );
        }
        test_field___data();
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_cond_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_cond_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlock_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlock_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlock_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlock_t))
        );
        fn test_field___data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlock_t),
                    "::",
                    stringify!(__data)
                )
            );
        }
        test_field___data();
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlock_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlock_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::std::os::raw::c_char; 8usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlockattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Size of: ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlockattr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlockattr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    pub type pthread_spinlock_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::std::os::raw::c_char; 32usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrier_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrier_t>(),
            32usize,
            concat!("Size of: ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrier_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_barrier_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_barrier_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_barrier_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrierattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_barrierattr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_barrierattr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_barrierattr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::std::os::raw::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        assert_eq!(
            ::std::mem::size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        fn test_field___val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__sigset_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__sigset_t),
                    "::",
                    stringify!(__val)
                )
            );
        }
        test_field___val();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        pub __jmpbuf: root::__jmp_buf,
        pub __mask_was_saved: ::std::os::raw::c_int,
        pub __saved_mask: root::__sigset_t,
    }
    #[test]
    fn bindgen_test_layout___jmp_buf_tag() {
        assert_eq!(
            ::std::mem::size_of::<__jmp_buf_tag>(),
            200usize,
            concat!("Size of: ", stringify!(__jmp_buf_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__jmp_buf_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__jmp_buf_tag))
        );
        fn test_field___jmpbuf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__jmp_buf_tag),
                    "::",
                    stringify!(__jmpbuf)
                )
            );
        }
        test_field___jmpbuf();
        fn test_field___mask_was_saved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__jmp_buf_tag),
                    "::",
                    stringify!(__mask_was_saved)
                )
            );
        }
        test_field___mask_was_saved();
        fn test_field___saved_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__jmp_buf_tag),
                    "::",
                    stringify!(__saved_mask)
                )
            );
        }
        test_field___saved_mask();
    }
    extern "C" {
        pub fn __sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    }
    pub const PTHREAD_CREATE_JOINABLE: root::_bindgen_ty_39 = 0;
    pub const PTHREAD_CREATE_DETACHED: root::_bindgen_ty_39 = 1;
    pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
    pub const PTHREAD_MUTEX_TIMED_NP: root::_bindgen_ty_40 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE_NP: root::_bindgen_ty_40 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK_NP: root::_bindgen_ty_40 = 2;
    pub const PTHREAD_MUTEX_ADAPTIVE_NP: root::_bindgen_ty_40 = 3;
    pub const PTHREAD_MUTEX_NORMAL: root::_bindgen_ty_40 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE: root::_bindgen_ty_40 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK: root::_bindgen_ty_40 = 2;
    pub const PTHREAD_MUTEX_DEFAULT: root::_bindgen_ty_40 = 0;
    pub const PTHREAD_MUTEX_FAST_NP: root::_bindgen_ty_40 = 0;
    pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
    pub const PTHREAD_MUTEX_STALLED: root::_bindgen_ty_41 = 0;
    pub const PTHREAD_MUTEX_STALLED_NP: root::_bindgen_ty_41 = 0;
    pub const PTHREAD_MUTEX_ROBUST: root::_bindgen_ty_41 = 1;
    pub const PTHREAD_MUTEX_ROBUST_NP: root::_bindgen_ty_41 = 1;
    pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
    pub const PTHREAD_PRIO_NONE: root::_bindgen_ty_42 = 0;
    pub const PTHREAD_PRIO_INHERIT: root::_bindgen_ty_42 = 1;
    pub const PTHREAD_PRIO_PROTECT: root::_bindgen_ty_42 = 2;
    pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
    pub const PTHREAD_RWLOCK_PREFER_READER_NP: root::_bindgen_ty_43 = 0;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: root::_bindgen_ty_43 = 1;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: root::_bindgen_ty_43 = 2;
    pub const PTHREAD_RWLOCK_DEFAULT_NP: root::_bindgen_ty_43 = 0;
    pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
    pub const PTHREAD_INHERIT_SCHED: root::_bindgen_ty_44 = 0;
    pub const PTHREAD_EXPLICIT_SCHED: root::_bindgen_ty_44 = 1;
    pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
    pub const PTHREAD_SCOPE_SYSTEM: root::_bindgen_ty_45 = 0;
    pub const PTHREAD_SCOPE_PROCESS: root::_bindgen_ty_45 = 1;
    pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
    pub const PTHREAD_PROCESS_PRIVATE: root::_bindgen_ty_46 = 0;
    pub const PTHREAD_PROCESS_SHARED: root::_bindgen_ty_46 = 1;
    pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _pthread_cleanup_buffer {
        pub __routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __arg: *mut ::std::os::raw::c_void,
        pub __canceltype: ::std::os::raw::c_int,
        pub __prev: *mut root::_pthread_cleanup_buffer,
    }
    #[test]
    fn bindgen_test_layout__pthread_cleanup_buffer() {
        assert_eq!(
            ::std::mem::size_of::<_pthread_cleanup_buffer>(),
            32usize,
            concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            ::std::mem::align_of::<_pthread_cleanup_buffer>(),
            8usize,
            concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
        );
        fn test_field___routine() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_pthread_cleanup_buffer>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_pthread_cleanup_buffer),
                    "::",
                    stringify!(__routine)
                )
            );
        }
        test_field___routine();
        fn test_field___arg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_pthread_cleanup_buffer>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_pthread_cleanup_buffer),
                    "::",
                    stringify!(__arg)
                )
            );
        }
        test_field___arg();
        fn test_field___canceltype() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_pthread_cleanup_buffer>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__canceltype) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_pthread_cleanup_buffer),
                    "::",
                    stringify!(__canceltype)
                )
            );
        }
        test_field___canceltype();
        fn test_field___prev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_pthread_cleanup_buffer>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_pthread_cleanup_buffer),
                    "::",
                    stringify!(__prev)
                )
            );
        }
        test_field___prev();
    }
    pub const PTHREAD_CANCEL_ENABLE: root::_bindgen_ty_47 = 0;
    pub const PTHREAD_CANCEL_DISABLE: root::_bindgen_ty_47 = 1;
    pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
    pub const PTHREAD_CANCEL_DEFERRED: root::_bindgen_ty_48 = 0;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: root::_bindgen_ty_48 = 1;
    pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
    extern "C" {
        pub fn pthread_create(
            __newthread: *mut root::pthread_t,
            __attr: *const root::pthread_attr_t,
            __start_routine: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn pthread_join(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_tryjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_timedjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_clockjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_detach(__th: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_self() -> root::pthread_t;
    }
    extern "C" {
        pub fn pthread_equal(
            __thread1: root::pthread_t,
            __thread2: root::pthread_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_init(__attr: *mut root::pthread_attr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_destroy(__attr: *mut root::pthread_attr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getdetachstate(
            __attr: *const root::pthread_attr_t,
            __detachstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setdetachstate(
            __attr: *mut root::pthread_attr_t,
            __detachstate: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getguardsize(
            __attr: *const root::pthread_attr_t,
            __guardsize: *mut root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setguardsize(
            __attr: *mut root::pthread_attr_t,
            __guardsize: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedparam(
            __attr: *const root::pthread_attr_t,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedparam(
            __attr: *mut root::pthread_attr_t,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedpolicy(
            __attr: *const root::pthread_attr_t,
            __policy: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedpolicy(
            __attr: *mut root::pthread_attr_t,
            __policy: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getinheritsched(
            __attr: *const root::pthread_attr_t,
            __inherit: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setinheritsched(
            __attr: *mut root::pthread_attr_t,
            __inherit: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getscope(
            __attr: *const root::pthread_attr_t,
            __scope: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setscope(
            __attr: *mut root::pthread_attr_t,
            __scope: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstackaddr(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstackaddr(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstacksize(
            __attr: *const root::pthread_attr_t,
            __stacksize: *mut root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstacksize(
            __attr: *mut root::pthread_attr_t,
            __stacksize: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstack(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::std::os::raw::c_void,
            __stacksize: *mut root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstack(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
            __stacksize: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setaffinity_np(
            __attr: *mut root::pthread_attr_t,
            __cpusetsize: root::size_t,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getaffinity_np(
            __attr: *const root::pthread_attr_t,
            __cpusetsize: root::size_t,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_default_np(
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setsigmask_np(
            __attr: *mut root::pthread_attr_t,
            sigmask: *const root::__sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getsigmask_np(
            __attr: *const root::pthread_attr_t,
            sigmask: *mut root::__sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setattr_default_np(
            __attr: *const root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_np(
            __th: root::pthread_t,
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedparam(
            __target_thread: root::pthread_t,
            __policy: ::std::os::raw::c_int,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getschedparam(
            __target_thread: root::pthread_t,
            __policy: *mut ::std::os::raw::c_int,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedprio(
            __target_thread: root::pthread_t,
            __prio: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getname_np(
            __target_thread: root::pthread_t,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setname_np(
            __target_thread: root::pthread_t,
            __name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: root::size_t,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: root::size_t,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_once(
            __once_control: *mut root::pthread_once_t,
            __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcancelstate(
            __state: ::std::os::raw::c_int,
            __oldstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcanceltype(
            __type: ::std::os::raw::c_int,
            __oldtype: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cancel(__th: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_testcancel();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __cancel_jmp_buf_tag {
        pub __cancel_jmp_buf: root::__jmp_buf,
        pub __mask_was_saved: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___cancel_jmp_buf_tag() {
        assert_eq!(
            ::std::mem::size_of::<__cancel_jmp_buf_tag>(),
            72usize,
            concat!("Size of: ", stringify!(__cancel_jmp_buf_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__cancel_jmp_buf_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__cancel_jmp_buf_tag))
        );
        fn test_field___cancel_jmp_buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__cancel_jmp_buf_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cancel_jmp_buf_tag),
                    "::",
                    stringify!(__cancel_jmp_buf)
                )
            );
        }
        test_field___cancel_jmp_buf();
        fn test_field___mask_was_saved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__cancel_jmp_buf_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cancel_jmp_buf_tag),
                    "::",
                    stringify!(__mask_was_saved)
                )
            );
        }
        test_field___mask_was_saved();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_unwind_buf_t {
        pub __cancel_jmp_buf: [root::__cancel_jmp_buf_tag; 1usize],
        pub __pad: [*mut ::std::os::raw::c_void; 4usize],
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_unwind_buf_t>(),
            104usize,
            concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_unwind_buf_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
        );
        fn test_field___cancel_jmp_buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_unwind_buf_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_unwind_buf_t),
                    "::",
                    stringify!(__cancel_jmp_buf)
                )
            );
        }
        test_field___cancel_jmp_buf();
        fn test_field___pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_unwind_buf_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_unwind_buf_t),
                    "::",
                    stringify!(__pad)
                )
            );
        }
        test_field___pad();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cleanup_frame {
        pub __cancel_routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_frame() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cleanup_frame>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cleanup_frame>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
        );
        fn test_field___cancel_routine() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cleanup_frame>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cleanup_frame),
                    "::",
                    stringify!(__cancel_routine)
                )
            );
        }
        test_field___cancel_routine();
        fn test_field___cancel_arg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cleanup_frame>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cleanup_frame),
                    "::",
                    stringify!(__cancel_arg)
                )
            );
        }
        test_field___cancel_arg();
        fn test_field___do_it() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cleanup_frame>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cleanup_frame),
                    "::",
                    stringify!(__do_it)
                )
            );
        }
        test_field___do_it();
        fn test_field___cancel_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cleanup_frame>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cleanup_frame),
                    "::",
                    stringify!(__cancel_type)
                )
            );
        }
        test_field___cancel_type();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct __pthread_cleanup_class {
        pub __cancel_routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_class() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cleanup_class>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cleanup_class>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_class))
        );
        fn test_field___cancel_routine() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cleanup_class>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cleanup_class),
                    "::",
                    stringify!(__cancel_routine)
                )
            );
        }
        test_field___cancel_routine();
        fn test_field___cancel_arg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cleanup_class>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cleanup_class),
                    "::",
                    stringify!(__cancel_arg)
                )
            );
        }
        test_field___cancel_arg();
        fn test_field___do_it() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cleanup_class>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cleanup_class),
                    "::",
                    stringify!(__do_it)
                )
            );
        }
        test_field___do_it();
        fn test_field___cancel_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cleanup_class>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cleanup_class),
                    "::",
                    stringify!(__cancel_type)
                )
            );
        }
        test_field___cancel_type();
    }
    extern "C" {
        pub fn __sigsetjmp(
            __env: *mut root::__jmp_buf_tag,
            __savemask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_init(
            __mutex: *mut root::pthread_mutex_t,
            __mutexattr: *const root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_destroy(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_trylock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_lock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_timedlock(
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_clocklock(
            __mutex: *mut root::pthread_mutex_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_unlock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_getprioceiling(
            __mutex: *const root::pthread_mutex_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_setprioceiling(
            __mutex: *mut root::pthread_mutex_t,
            __prioceiling: ::std::os::raw::c_int,
            __old_ceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_init(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_destroy(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getpshared(
            __attr: *const root::pthread_mutexattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setpshared(
            __attr: *mut root::pthread_mutexattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_gettype(
            __attr: *const root::pthread_mutexattr_t,
            __kind: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_settype(
            __attr: *mut root::pthread_mutexattr_t,
            __kind: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            __attr: *const root::pthread_mutexattr_t,
            __protocol: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            __attr: *mut root::pthread_mutexattr_t,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            __attr: *const root::pthread_mutexattr_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            __attr: *mut root::pthread_mutexattr_t,
            __prioceiling: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_init(
            __rwlock: *mut root::pthread_rwlock_t,
            __attr: *const root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_destroy(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_rdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_tryrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_clockrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_wrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_trywrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_clockwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __clockid: root::clockid_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_unlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_init(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_destroy(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            __attr: *const root::pthread_rwlockattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            __attr: *mut root::pthread_rwlockattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getkind_np(
            __attr: *const root::pthread_rwlockattr_t,
            __pref: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setkind_np(
            __attr: *mut root::pthread_rwlockattr_t,
            __pref: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_init(
            __cond: *mut root::pthread_cond_t,
            __cond_attr: *const root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_destroy(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_signal(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_broadcast(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_wait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_timedwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_clockwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __clock_id: root::__clockid_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_init(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_destroy(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getpshared(
            __attr: *const root::pthread_condattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setpshared(
            __attr: *mut root::pthread_condattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getclock(
            __attr: *const root::pthread_condattr_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setclock(
            __attr: *mut root::pthread_condattr_t,
            __clock_id: root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_init(
            __lock: *mut root::pthread_spinlock_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_destroy(__lock: *mut root::pthread_spinlock_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_lock(__lock: *mut root::pthread_spinlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_trylock(__lock: *mut root::pthread_spinlock_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_unlock(__lock: *mut root::pthread_spinlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_init(
            __barrier: *mut root::pthread_barrier_t,
            __attr: *const root::pthread_barrierattr_t,
            __count: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_destroy(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_wait(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_init(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_destroy(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_getpshared(
            __attr: *const root::pthread_barrierattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_setpshared(
            __attr: *mut root::pthread_barrierattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_create(
            __key: *mut root::pthread_key_t,
            __destr_function: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_delete(__key: root::pthread_key_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getspecific(__key: root::pthread_key_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn pthread_setspecific(
            __key: root::pthread_key_t,
            __pointer: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getcpuclockid(
            __thread_id: root::pthread_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_atfork(
            __prepare: ::std::option::Option<unsafe extern "C" fn()>,
            __parent: ::std::option::Option<unsafe extern "C" fn()>,
            __child: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    pub type __gthread_t = root::pthread_t;
    pub type __gthread_key_t = root::pthread_key_t;
    pub type __gthread_once_t = root::pthread_once_t;
    pub type __gthread_mutex_t = root::pthread_mutex_t;
    pub type __gthread_recursive_mutex_t = root::pthread_mutex_t;
    pub type __gthread_cond_t = root::pthread_cond_t;
    pub type __gthread_time_t = root::timespec;
    pub type _Atomic_word = ::std::os::raw::c_int;
    extern "C" {
        pub static mut __libc_single_threaded: ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        fn test_field_quot() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<div_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(div_t),
                    "::",
                    stringify!(quot)
                )
            );
        }
        test_field_quot();
        fn test_field_rem() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<div_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(div_t),
                    "::",
                    stringify!(rem)
                )
            );
        }
        test_field_rem();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        fn test_field_quot() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ldiv_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ldiv_t),
                    "::",
                    stringify!(quot)
                )
            );
        }
        test_field_quot();
        fn test_field_rem() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ldiv_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ldiv_t),
                    "::",
                    stringify!(rem)
                )
            );
        }
        test_field_rem();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        fn test_field_quot() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lldiv_t),
                    "::",
                    stringify!(quot)
                )
            );
        }
        test_field_quot();
        fn test_field_rem() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lldiv_t),
                    "::",
                    stringify!(rem)
                )
            );
        }
        test_field_rem();
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> root::size_t;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> u128;
    }
    extern "C" {
        pub fn strtof32(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strfromd(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: f32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfroml(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: u128,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32x,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64x,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strtol_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtod_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> u128;
    }
    extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type id_t = root::__id_t;
    pub type ssize_t = root::__ssize_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type useconds_t = root::__useconds_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::std::os::raw::c_ulong;
    pub type ushort = ::std::os::raw::c_ushort;
    pub type uint = ::std::os::raw::c_uint;
    pub type u_int8_t = root::__uint8_t;
    pub type u_int16_t = root::__uint16_t;
    pub type u_int32_t = root::__uint32_t;
    pub type u_int64_t = root::__uint64_t;
    pub type register_t = ::std::os::raw::c_long;
    pub type sigset_t = root::__sigset_t;
    pub type __fd_mask = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        fn test_field_fds_bits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(fd_set),
                    "::",
                    stringify!(fds_bits)
                )
            );
        }
        test_field_fds_bits();
    }
    pub type fd_mask = root::__fd_mask;
    extern "C" {
        pub fn select(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    extern "C" {
        pub fn random() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srandom(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn initstate(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: root::size_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::std::os::raw::c_int,
        pub rand_deg: ::std::os::raw::c_int,
        pub rand_sep: ::std::os::raw::c_int,
        pub end_ptr: *mut i32,
    }
    #[test]
    fn bindgen_test_layout_random_data() {
        assert_eq!(
            ::std::mem::size_of::<random_data>(),
            48usize,
            concat!("Size of: ", stringify!(random_data))
        );
        assert_eq!(
            ::std::mem::align_of::<random_data>(),
            8usize,
            concat!("Alignment of ", stringify!(random_data))
        );
        fn test_field_fptr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(random_data),
                    "::",
                    stringify!(fptr)
                )
            );
        }
        test_field_fptr();
        fn test_field_rptr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(random_data),
                    "::",
                    stringify!(rptr)
                )
            );
        }
        test_field_rptr();
        fn test_field_state() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(random_data),
                    "::",
                    stringify!(state)
                )
            );
        }
        test_field_state();
        fn test_field_rand_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(random_data),
                    "::",
                    stringify!(rand_type)
                )
            );
        }
        test_field_rand_type();
        fn test_field_rand_deg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(random_data),
                    "::",
                    stringify!(rand_deg)
                )
            );
        }
        test_field_rand_deg();
        fn test_field_rand_sep() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(random_data),
                    "::",
                    stringify!(rand_sep)
                )
            );
        }
        test_field_rand_sep();
        fn test_field_end_ptr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(random_data),
                    "::",
                    stringify!(end_ptr)
                )
            );
        }
        test_field_end_ptr();
    }
    extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srandom_r(
            __seed: ::std::os::raw::c_uint,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn initstate_r(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: root::size_t,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::std::os::raw::c_char,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    }
    extern "C" {
        pub fn lrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn mrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srand48(__seedval: ::std::os::raw::c_long);
    }
    extern "C" {
        pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [::std::os::raw::c_ushort; 3usize],
        pub __old_x: [::std::os::raw::c_ushort; 3usize],
        pub __c: ::std::os::raw::c_ushort,
        pub __init: ::std::os::raw::c_ushort,
        pub __a: ::std::os::raw::c_ulonglong,
    }
    #[test]
    fn bindgen_test_layout_drand48_data() {
        assert_eq!(
            ::std::mem::size_of::<drand48_data>(),
            24usize,
            concat!("Size of: ", stringify!(drand48_data))
        );
        assert_eq!(
            ::std::mem::align_of::<drand48_data>(),
            8usize,
            concat!("Alignment of ", stringify!(drand48_data))
        );
        fn test_field___x() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(drand48_data),
                    "::",
                    stringify!(__x)
                )
            );
        }
        test_field___x();
        fn test_field___old_x() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(drand48_data),
                    "::",
                    stringify!(__old_x)
                )
            );
        }
        test_field___old_x();
        fn test_field___c() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(drand48_data),
                    "::",
                    stringify!(__c)
                )
            );
        }
        test_field___c();
        fn test_field___init() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize
                },
                14usize,
                concat!(
                    "Offset of field: ",
                    stringify!(drand48_data),
                    "::",
                    stringify!(__init)
                )
            );
        }
        test_field___init();
        fn test_field___a() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(drand48_data),
                    "::",
                    stringify!(__a)
                )
            );
        }
        test_field___a();
    }
    extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand48_r(
            __seedval: ::std::os::raw::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lcong48_r(
            __param: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn malloc(__size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: root::size_t, __size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::std::os::raw::c_void,
            __nmemb: root::size_t,
            __size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn alloca(__size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn valloc(__size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: root::size_t,
            __size: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn aligned_alloc(
            __alignment: root::size_t,
            __size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn on_exit(
            __func: ::std::option::Option<
                unsafe extern "C" fn(
                    __status: ::std::os::raw::c_int,
                    __arg: *mut ::std::os::raw::c_void,
                ),
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setenv(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __replace: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearenv() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkostemp(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemp64(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn realpath(
            __name: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: root::size_t,
            __size: root::size_t,
            __compar: root::__compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: root::size_t,
            __size: root::size_t,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn qsort_r(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: root::size_t,
            __size: root::size_t,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mblen(
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(
            __pwcs: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcstombs(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const u32,
            __n: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __valuep: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ptsname_r(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpt() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getloadavg(
            __loadavg: *mut f64,
            __nelem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        fn test_field___pos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_G_fpos_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_G_fpos_t),
                    "::",
                    stringify!(__pos)
                )
            );
        }
        test_field___pos();
        fn test_field___state() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_G_fpos_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_G_fpos_t),
                    "::",
                    stringify!(__state)
                )
            );
        }
        test_field___state();
    }
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        fn test_field___pos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_G_fpos64_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_G_fpos64_t),
                    "::",
                    stringify!(__pos)
                )
            );
        }
        test_field___pos();
        fn test_field___state() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_G_fpos64_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_G_fpos64_t),
                    "::",
                    stringify!(__state)
                )
            );
        }
        test_field___state();
    }
    pub type __fpos64_t = root::_G_fpos64_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::std::os::raw::c_void,
        pub __pad5: root::size_t,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        fn test_field__flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_flags)
                )
            );
        }
        test_field__flags();
        fn test_field__IO_read_ptr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_read_ptr)
                )
            );
        }
        test_field__IO_read_ptr();
        fn test_field__IO_read_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_read_end)
                )
            );
        }
        test_field__IO_read_end();
        fn test_field__IO_read_base() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_read_base)
                )
            );
        }
        test_field__IO_read_base();
        fn test_field__IO_write_base() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_write_base)
                )
            );
        }
        test_field__IO_write_base();
        fn test_field__IO_write_ptr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_write_ptr)
                )
            );
        }
        test_field__IO_write_ptr();
        fn test_field__IO_write_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_write_end)
                )
            );
        }
        test_field__IO_write_end();
        fn test_field__IO_buf_base() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_buf_base)
                )
            );
        }
        test_field__IO_buf_base();
        fn test_field__IO_buf_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_buf_end)
                )
            );
        }
        test_field__IO_buf_end();
        fn test_field__IO_save_base() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_save_base)
                )
            );
        }
        test_field__IO_save_base();
        fn test_field__IO_backup_base() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_backup_base)
                )
            );
        }
        test_field__IO_backup_base();
        fn test_field__IO_save_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_IO_save_end)
                )
            );
        }
        test_field__IO_save_end();
        fn test_field__markers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_markers)
                )
            );
        }
        test_field__markers();
        fn test_field__chain() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_chain)
                )
            );
        }
        test_field__chain();
        fn test_field__fileno() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_fileno)
                )
            );
        }
        test_field__fileno();
        fn test_field__flags2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize
                },
                116usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_flags2)
                )
            );
        }
        test_field__flags2();
        fn test_field__old_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_old_offset)
                )
            );
        }
        test_field__old_offset();
        fn test_field__cur_column() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_cur_column)
                )
            );
        }
        test_field__cur_column();
        fn test_field__vtable_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize
                },
                130usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_vtable_offset)
                )
            );
        }
        test_field__vtable_offset();
        fn test_field__shortbuf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize
                },
                131usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_shortbuf)
                )
            );
        }
        test_field__shortbuf();
        fn test_field__lock() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_lock)
                )
            );
        }
        test_field__lock();
        fn test_field__offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_offset)
                )
            );
        }
        test_field__offset();
        fn test_field__codecvt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_codecvt)
                )
            );
        }
        test_field__codecvt();
        fn test_field__wide_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_wide_data)
                )
            );
        }
        test_field__wide_data();
        fn test_field__freeres_list() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize
                },
                168usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_freeres_list)
                )
            );
        }
        test_field__freeres_list();
        fn test_field__freeres_buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize
                },
                176usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_freeres_buf)
                )
            );
        }
        test_field__freeres_buf();
        fn test_field___pad5() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize
                },
                184usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(__pad5)
                )
            );
        }
        test_field___pad5();
        fn test_field__mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize
                },
                192usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_mode)
                )
            );
        }
        test_field__mode();
        fn test_field__unused2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize
                },
                196usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_FILE),
                    "::",
                    stringify!(_unused2)
                )
            );
        }
        test_field__unused2();
    }
    pub type cookie_read_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: root::size_t,
        ) -> root::__ssize_t,
    >;
    pub type cookie_write_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *const ::std::os::raw::c_char,
            __nbytes: root::size_t,
        ) -> root::__ssize_t,
    >;
    pub type cookie_seek_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __pos: *mut root::__off64_t,
            __w: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
    pub type cookie_close_function_t = ::std::option::Option<
        unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::cookie_read_function_t,
        pub write: root::cookie_write_function_t,
        pub seek: root::cookie_seek_function_t,
        pub close: root::cookie_close_function_t,
    }
    #[test]
    fn bindgen_test_layout__IO_cookie_io_functions_t() {
        assert_eq!(
            ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
            32usize,
            concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
        );
        fn test_field_read() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_cookie_io_functions_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_cookie_io_functions_t),
                    "::",
                    stringify!(read)
                )
            );
        }
        test_field_read();
        fn test_field_write() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_cookie_io_functions_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_cookie_io_functions_t),
                    "::",
                    stringify!(write)
                )
            );
        }
        test_field_write();
        fn test_field_seek() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_cookie_io_functions_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_cookie_io_functions_t),
                    "::",
                    stringify!(seek)
                )
            );
        }
        test_field_seek();
        fn test_field_close() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<_IO_cookie_io_functions_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_IO_cookie_io_functions_t),
                    "::",
                    stringify!(close)
                )
            );
        }
        test_field_close();
    }
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    pub type fpos_t = root::__fpos_t;
    pub type fpos64_t = root::__fpos64_t;
    extern "C" {
        pub static mut stdin: *mut root::FILE;
    }
    extern "C" {
        pub static mut stdout: *mut root::FILE;
    }
    extern "C" {
        pub static mut stderr: *mut root::FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn renameat(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn renameat2(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tempnam(
            __dir: *const ::std::os::raw::c_char,
            __pfx: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcloseall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fdopen(
            __fd: ::std::os::raw::c_int,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut ::std::os::raw::c_void,
            __modes: *const ::std::os::raw::c_char,
            __io_funcs: root::cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fmemopen(
            __s: *mut ::std::os::raw::c_void,
            __len: root::size_t,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn open_memstream(
            __bufloc: *mut *mut ::std::os::raw::c_char,
            __sizeloc: *mut root::size_t,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setbuffer(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: root::size_t,
        );
    }
    extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: root::size_t,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __f: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __asprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn asprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vdprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_fscanf"]
        pub fn fscanf1(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_scanf"]
        pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_sscanf"]
        pub fn sscanf1(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vfscanf"]
        pub fn vfscanf1(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vscanf"]
        pub fn vscanf1(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vsscanf"]
        pub fn vsscanf1(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fgets_unlocked(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut root::size_t,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut root::size_t,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getline(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut root::size_t,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: root::size_t,
            __n: root::size_t,
            __stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: root::size_t,
            __n: root::size_t,
            __s: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn fputs_unlocked(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut ::std::os::raw::c_void,
            __size: root::size_t,
            __n: root::size_t,
            __stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const ::std::os::raw::c_void,
            __size: root::size_t,
            __n: root::size_t,
            __stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    extern "C" {
        pub fn fgetpos(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(
            __stream: *mut root::FILE,
            __pos: *const root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    extern "C" {
        pub fn fgetpos64(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos64(
            __stream: *mut root::FILE,
            __pos: *const root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fileno_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn popen(
            __command: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            __args: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(
            arg1: *mut root::FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __errno_location() -> *mut ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
    }
    pub type error_t = ::std::os::raw::c_int;
    pub mod TagLib {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct String {
            _unused: [u8; 0],
        }
        pub type wchar = u32;
        pub type uchar = ::std::os::raw::c_uchar;
        pub type ushort = ::std::os::raw::c_ushort;
        pub type uint = ::std::os::raw::c_uint;
        pub type ulong = ::std::os::raw::c_ulong;
        pub type ulonglong = ::std::os::raw::c_ulonglong;
        #[doc = " Unfortunately std::wstring isn't defined on some systems, (i.e. GCC < 3)"]
        #[doc = " so I'm providing something here that should be constant."]
        pub type wstring = root::std::basic_string<u32>;
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<::std::os::raw::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<::std::os::raw::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_3 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_4 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_5 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_6 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_7 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_8 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_9 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_10 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_31 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_32 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_33 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_34 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_35 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_36 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_37 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            ::std::mem::size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        fn test_field_gp_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__va_list_tag),
                    "::",
                    stringify!(gp_offset)
                )
            );
        }
        test_field_gp_offset();
        fn test_field_fp_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__va_list_tag),
                    "::",
                    stringify!(fp_offset)
                )
            );
        }
        test_field_fp_offset();
        fn test_field_overflow_arg_area() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__va_list_tag),
                    "::",
                    stringify!(overflow_arg_area)
                )
            );
        }
        test_field_overflow_arg_area();
        fn test_field_reg_save_area() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__va_list_tag),
                    "::",
                    stringify!(reg_save_area)
                )
            );
        }
        test_field_reg_save_area();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_13() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_13() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_void_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_14() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<::std::os::raw::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<::std::os::raw::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_15() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_16() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_14() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_15() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_16() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<::std::os::raw::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<::std::os::raw::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_17() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<::std::os::raw::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<::std::os::raw::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_18() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_17() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_18() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_19() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_19() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_20() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
}
